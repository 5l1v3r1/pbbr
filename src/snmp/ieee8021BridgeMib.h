/*****************************************************************************

 @(#) src/snmp/ieee8021bridgemib.h

 -----------------------------------------------------------------------------

 Copyright (c) 2008-2015  Monavacon Limited <http://www.monavacon.com/>
 Copyright (c) 2001-2008  OpenSS7 Corporation <http://www.openss7.com/>
 Copyright (c) 1997-2001  Brian F. G. Bidulock <bidulock@openss7.org>

 All Rights Reserved.

 This program is free software; you can redistribute it and/or modify it under
 the terms of the GNU Affero General Public License as published by the Free
 Software Foundation; version 3 of the License.

 This program is distributed in the hope that it will be useful, but WITHOUT
 ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
 details.

 You should have received a copy of the GNU Affero General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>, or
 write to the Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA
 02139, USA.

 -----------------------------------------------------------------------------

 U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software on
 behalf of the U.S. Government ("Government"), the following provisions apply
 to you.  If the Software is supplied by the Department of Defense ("DoD"), it
 is classified as "Commercial Computer Software" under paragraph 252.227-7014
 of the DoD Supplement to the Federal Acquisition Regulations ("DFARS") (or any
 successor regulations) and the Government is acquiring only the license rights
 granted herein (the license rights customarily provided to non-Government
 users).  If the Software is supplied to any unit or agency of the Government
 other than DoD, it is classified as "Restricted Computer Software" and the
 Government's rights in the Software are defined in paragraph 52.227-19 of the
 Federal Acquisition Regulations ("FAR") (or any successor regulations) or, in
 the cases of NASA, in paragraph 18.52.227-86 of the NASA Supplement to the FAR
 (or any successor regulations).

 -----------------------------------------------------------------------------

 Commercial licensing and support of this software is available from OpenSS7
 Corporation at a fee.  See http://www.openss7.com/

 *****************************************************************************/

#ifndef __LOCAL_IEEE8021BRIDGEMIB_H__
#define __LOCAL_IEEE8021BRIDGEMIB_H__

/*
 * This file was generated by mib2c and is intended for use as a mib module
 * for the ucd-snmp snmpd agent.
 */

extern const char sa_program[];
extern int sa_fclose;			/* default close files between requests */
extern int sa_changed;			/* indication to reread MIB configuration */
extern int sa_stats_refresh;		/* indications that statistics, the mib or its tables need to be refreshed */
extern int sa_request;			/* request number for per-request actions */

/* our storage structure(s) */
struct ieee8021BridgeMib_data {
	struct ieee8021BridgeMib_data *ieee8021BridgeMib_old;
	uint ieee8021BridgeMib_rsvs;
	uint ieee8021BridgeMib_tsts;
	uint ieee8021BridgeMib_sets;
	uint ieee8021BridgeMib_request;
};
struct ieee8021BridgeBaseTable_data {
	struct ieee8021BridgeBaseTable_data *ieee8021BridgeBaseTable_old;
	uint ieee8021BridgeBaseTable_rsvs;
	uint ieee8021BridgeBaseTable_tsts;
	uint ieee8021BridgeBaseTable_sets;
	uint ieee8021BridgeBaseTable_request;
	uint ieee8021BridgeBaseTable_refs;
	uint ieee8021BridgeBaseTable_id;
	ulong ieee8021BridgeBaseComponentId;	/* NoAccess */
	uint8_t *ieee8021BridgeBaseBridgeAddress;	/* Create */
	size_t ieee8021BridgeBaseBridgeAddressLen;
	long ieee8021BridgeBaseNumPorts;	/* ReadOnly */
	long ieee8021BridgeBaseComponentType;	/* Create */
	uint8_t *ieee8021BridgeBaseDeviceCapabilities;	/* Create */
	size_t ieee8021BridgeBaseDeviceCapabilitiesLen;
	long ieee8021BridgeBaseTrafficClassesEnabled;	/* Create */
	long ieee8021BridgeBaseMmrpEnabledStatus;	/* Create */
	long ieee8021BridgeBaseRowStatus;	/* Create */
};
struct ieee8021BridgeBasePortTable_data {
	struct ieee8021BridgeBasePortTable_data *ieee8021BridgeBasePortTable_old;
	uint ieee8021BridgeBasePortTable_rsvs;
	uint ieee8021BridgeBasePortTable_tsts;
	uint ieee8021BridgeBasePortTable_sets;
	uint ieee8021BridgeBasePortTable_request;
	uint ieee8021BridgeBasePortTable_refs;
	uint ieee8021BridgeBasePortTable_id;
	ulong ieee8021BridgeBasePortComponentId;	/* NoAccess */
	ulong ieee8021BridgeBasePort;	/* NoAccess */
	long ieee8021BridgeBasePortIfIndex;	/* ReadWrite */
	struct counter64 ieee8021BridgeBasePortDelayExceededDiscards;	/* ReadOnly */
	struct counter64 ieee8021BridgeBasePortMtuExceededDiscards;	/* ReadOnly */
	uint8_t *ieee8021BridgeBasePortCapabilities;	/* ReadOnly */
	size_t ieee8021BridgeBasePortCapabilitiesLen;
	uint8_t *ieee8021BridgeBasePortTypeCapabilities;	/* ReadOnly */
	size_t ieee8021BridgeBasePortTypeCapabilitiesLen;
	long ieee8021BridgeBasePortType;	/* ReadOnly */
	long ieee8021BridgeBasePortExternal;	/* ReadOnly */
	long ieee8021BridgeBasePortAdminPointToPoint;	/* ReadWrite */
	long ieee8021BridgeBasePortOperPointToPoint;	/* ReadOnly */
	uint8_t *ieee8021BridgeBasePortName;	/* ReadOnly */
	size_t ieee8021BridgeBasePortNameLen;
};
struct ieee8021BridgeBaseIfToPortTable_data {
	struct ieee8021BridgeBaseIfToPortTable_data *ieee8021BridgeBaseIfToPortTable_old;
	uint ieee8021BridgeBaseIfToPortTable_rsvs;
	uint ieee8021BridgeBaseIfToPortTable_tsts;
	uint ieee8021BridgeBaseIfToPortTable_sets;
	uint ieee8021BridgeBaseIfToPortTable_request;
	uint ieee8021BridgeBaseIfToPortTable_refs;
	uint ieee8021BridgeBaseIfToPortTable_id;
	long ifIndex;			/* ReadOnly */
	ulong ieee8021BridgeBaseIfIndexComponentId;	/* ReadOnly */
	ulong ieee8021BridgeBaseIfIndexPort;	/* ReadOnly */
};
struct ieee8021BridgePhyPortTable_data {
	struct ieee8021BridgePhyPortTable_data *ieee8021BridgePhyPortTable_old;
	uint ieee8021BridgePhyPortTable_rsvs;
	uint ieee8021BridgePhyPortTable_tsts;
	uint ieee8021BridgePhyPortTable_sets;
	uint ieee8021BridgePhyPortTable_request;
	uint ieee8021BridgePhyPortTable_refs;
	uint ieee8021BridgePhyPortTable_id;
	ulong ieee8021BridgePhyPort;	/* NoAccess */
	long ieee8021BridgePhyPortIfIndex;	/* ReadOnly */
	uint8_t *ieee8021BridgePhyMacAddress;	/* ReadOnly */
	size_t ieee8021BridgePhyMacAddressLen;
	ulong ieee8021BridgePhyPortToComponentId;	/* ReadOnly */
	ulong ieee8021BridgePhyPortToInternalPort;	/* ReadOnly */
};
struct ieee8021BridgeTpPortTable_data {
	struct ieee8021BridgeTpPortTable_data *ieee8021BridgeTpPortTable_old;
	uint ieee8021BridgeTpPortTable_rsvs;
	uint ieee8021BridgeTpPortTable_tsts;
	uint ieee8021BridgeTpPortTable_sets;
	uint ieee8021BridgeTpPortTable_request;
	uint ieee8021BridgeTpPortTable_refs;
	uint ieee8021BridgeTpPortTable_id;
	ulong ieee8021BridgeTpPortComponentId;	/* NoAccess */
	ulong ieee8021BridgeTpPort;	/* NoAccess */
	long ieee8021BridgeTpPortMaxInfo;	/* ReadOnly */
	struct counter64 ieee8021BridgeTpPortInFrames;	/* ReadOnly */
	struct counter64 ieee8021BridgeTpPortOutFrames;	/* ReadOnly */
	struct counter64 ieee8021BridgeTpPortInDiscards;	/* ReadOnly */
};
struct ieee8021BridgePortPriorityTable_data {
	struct ieee8021BridgePortPriorityTable_data *ieee8021BridgePortPriorityTable_old;
	uint ieee8021BridgePortPriorityTable_rsvs;
	uint ieee8021BridgePortPriorityTable_tsts;
	uint ieee8021BridgePortPriorityTable_sets;
	uint ieee8021BridgePortPriorityTable_request;
	uint ieee8021BridgePortPriorityTable_refs;
	uint ieee8021BridgePortPriorityTable_id;
	ulong ieee8021BridgeBasePortComponentId;	/* NoAccess */
	ulong ieee8021BridgeBasePort;	/* NoAccess */
	ulong ieee8021BridgePortDefaultUserPriority;	/* ReadWrite */
	long ieee8021BridgePortNumTrafficClasses;	/* ReadWrite */
	long ieee8021BridgePortPriorityCodePointSelection;	/* ReadWrite */
	long ieee8021BridgePortUseDEI;	/* ReadWrite */
	long ieee8021BridgePortRequireDropEncoding;	/* ReadWrite */
	long ieee8021BridgePortServiceAccessPrioritySelection;	/* ReadWrite */
};
struct ieee8021BridgeUserPriorityRegenTable_data {
	struct ieee8021BridgeUserPriorityRegenTable_data *ieee8021BridgeUserPriorityRegenTable_old;
	uint ieee8021BridgeUserPriorityRegenTable_rsvs;
	uint ieee8021BridgeUserPriorityRegenTable_tsts;
	uint ieee8021BridgeUserPriorityRegenTable_sets;
	uint ieee8021BridgeUserPriorityRegenTable_request;
	uint ieee8021BridgeUserPriorityRegenTable_refs;
	uint ieee8021BridgeUserPriorityRegenTable_id;
	ulong ieee8021BridgeBasePortComponentId;	/* NoAccess */
	ulong ieee8021BridgeBasePort;	/* NoAccess */
	ulong ieee8021BridgeUserPriority;	/* NoAccess */
	ulong ieee8021BridgeRegenUserPriority;	/* ReadWrite */
};
struct ieee8021BridgeTrafficClassTable_data {
	struct ieee8021BridgeTrafficClassTable_data *ieee8021BridgeTrafficClassTable_old;
	uint ieee8021BridgeTrafficClassTable_rsvs;
	uint ieee8021BridgeTrafficClassTable_tsts;
	uint ieee8021BridgeTrafficClassTable_sets;
	uint ieee8021BridgeTrafficClassTable_request;
	uint ieee8021BridgeTrafficClassTable_refs;
	uint ieee8021BridgeTrafficClassTable_id;
	ulong ieee8021BridgeBasePortComponentId;	/* NoAccess */
	ulong ieee8021BridgeBasePort;	/* NoAccess */
	ulong ieee8021BridgeTrafficClassPriority;	/* NoAccess */
	long ieee8021BridgeTrafficClass;	/* ReadWrite */
};
struct ieee8021BridgePortOutboundAccessPriorityTable_data {
	struct ieee8021BridgePortOutboundAccessPriorityTable_data *ieee8021BridgePortOutboundAccessPriorityTable_old;
	uint ieee8021BridgePortOutboundAccessPriorityTable_rsvs;
	uint ieee8021BridgePortOutboundAccessPriorityTable_tsts;
	uint ieee8021BridgePortOutboundAccessPriorityTable_sets;
	uint ieee8021BridgePortOutboundAccessPriorityTable_request;
	uint ieee8021BridgePortOutboundAccessPriorityTable_refs;
	uint ieee8021BridgePortOutboundAccessPriorityTable_id;
	ulong ieee8021BridgeBasePortComponentId;	/* NoAccess */
	ulong ieee8021BridgeBasePort;	/* NoAccess */
	ulong ieee8021BridgeRegenUserPriority;	/* ReadWrite */
	ulong ieee8021BridgePortOutboundAccessPriority;	/* ReadOnly */
};
struct ieee8021BridgePortDecodingTable_data {
	struct ieee8021BridgePortDecodingTable_data *ieee8021BridgePortDecodingTable_old;
	uint ieee8021BridgePortDecodingTable_rsvs;
	uint ieee8021BridgePortDecodingTable_tsts;
	uint ieee8021BridgePortDecodingTable_sets;
	uint ieee8021BridgePortDecodingTable_request;
	uint ieee8021BridgePortDecodingTable_refs;
	uint ieee8021BridgePortDecodingTable_id;
	ulong ieee8021BridgePortDecodingComponentId;	/* NoAccess */
	ulong ieee8021BridgePortDecodingPortNum;	/* NoAccess */
	long ieee8021BridgePortDecodingPriorityCodePointRow;	/* NoAccess */
	long ieee8021BridgePortDecodingPriorityCodePoint;	/* NoAccess */
	ulong ieee8021BridgePortDecodingPriority;	/* ReadWrite */
	long ieee8021BridgePortDecodingDropEligible;	/* ReadWrite */
};
struct ieee8021BridgePortEncodingTable_data {
	struct ieee8021BridgePortEncodingTable_data *ieee8021BridgePortEncodingTable_old;
	uint ieee8021BridgePortEncodingTable_rsvs;
	uint ieee8021BridgePortEncodingTable_tsts;
	uint ieee8021BridgePortEncodingTable_sets;
	uint ieee8021BridgePortEncodingTable_request;
	uint ieee8021BridgePortEncodingTable_refs;
	uint ieee8021BridgePortEncodingTable_id;
	ulong ieee8021BridgePortEncodingComponentId;	/* NoAccess */
	ulong ieee8021BridgePortEncodingPortNum;	/* NoAccess */
	long ieee8021BridgePortEncodingPriorityCodePointRow;	/* NoAccess */
	long ieee8021BridgePortEncodingPriorityCodePoint;	/* NoAccess */
	long ieee8021BridgePortEncodingDropEligible;	/* NoAccess */
	ulong ieee8021BridgePortEncodingPriority;	/* ReadWrite */
};
struct ieee8021BridgeServiceAccessPriorityTable_data {
	struct ieee8021BridgeServiceAccessPriorityTable_data *ieee8021BridgeServiceAccessPriorityTable_old;
	uint ieee8021BridgeServiceAccessPriorityTable_rsvs;
	uint ieee8021BridgeServiceAccessPriorityTable_tsts;
	uint ieee8021BridgeServiceAccessPriorityTable_sets;
	uint ieee8021BridgeServiceAccessPriorityTable_request;
	uint ieee8021BridgeServiceAccessPriorityTable_refs;
	uint ieee8021BridgeServiceAccessPriorityTable_id;
	ulong ieee8021BridgeServiceAccessPriorityComponentId;	/* NoAccess */
	ulong ieee8021BridgeServiceAccessPriorityPortNum;	/* NoAccess */
	ulong ieee8021BridgeServiceAccessPriorityReceived;	/* NoAccess */
	ulong ieee8021BridgeServiceAccessPriorityValue;	/* ReadWrite */
};
struct ieee8021BridgePortMrpTable_data {
	struct ieee8021BridgePortMrpTable_data *ieee8021BridgePortMrpTable_old;
	uint ieee8021BridgePortMrpTable_rsvs;
	uint ieee8021BridgePortMrpTable_tsts;
	uint ieee8021BridgePortMrpTable_sets;
	uint ieee8021BridgePortMrpTable_request;
	uint ieee8021BridgePortMrpTable_refs;
	uint ieee8021BridgePortMrpTable_id;
	ulong ieee8021BridgeBasePortComponentId;	/* NoAccess */
	ulong ieee8021BridgeBasePort;	/* NoAccess */
	long ieee8021BridgePortMrpJoinTime;	/* ReadWrite */
	long ieee8021BridgePortMrpLeaveTime;	/* ReadWrite */
	long ieee8021BridgePortMrpLeaveAllTime;	/* ReadWrite */
};
struct ieee8021BridgePortMmrpTable_data {
	struct ieee8021BridgePortMmrpTable_data *ieee8021BridgePortMmrpTable_old;
	uint ieee8021BridgePortMmrpTable_rsvs;
	uint ieee8021BridgePortMmrpTable_tsts;
	uint ieee8021BridgePortMmrpTable_sets;
	uint ieee8021BridgePortMmrpTable_request;
	uint ieee8021BridgePortMmrpTable_refs;
	uint ieee8021BridgePortMmrpTable_id;
	ulong ieee8021BridgeBasePortComponentId;	/* NoAccess */
	ulong ieee8021BridgeBasePort;	/* NoAccess */
	long ieee8021BridgePortMmrpEnabledStatus;	/* ReadWrite */
	struct counter64 ieee8021BridgePortMmrpFailedRegistrations;	/* ReadOnly */
	uint8_t *ieee8021BridgePortMmrpLastPduOrigin;	/* ReadOnly */
	size_t ieee8021BridgePortMmrpLastPduOriginLen;
	long ieee8021BridgePortRestrictedGroupRegistration;	/* ReadWrite */
};
struct ieee8021BridgeILanIfTable_data {
	struct ieee8021BridgeILanIfTable_data *ieee8021BridgeILanIfTable_old;
	uint ieee8021BridgeILanIfTable_rsvs;
	uint ieee8021BridgeILanIfTable_tsts;
	uint ieee8021BridgeILanIfTable_sets;
	uint ieee8021BridgeILanIfTable_request;
	uint ieee8021BridgeILanIfTable_refs;
	uint ieee8021BridgeILanIfTable_id;
	long ifIndex;			/* ReadOnly */
	long ieee8021BridgeILanIfRowStatus;	/* Create */
};
struct ieee8021BridgeDot1dPortTable_data {
	struct ieee8021BridgeDot1dPortTable_data *ieee8021BridgeDot1dPortTable_old;
	uint ieee8021BridgeDot1dPortTable_rsvs;
	uint ieee8021BridgeDot1dPortTable_tsts;
	uint ieee8021BridgeDot1dPortTable_sets;
	uint ieee8021BridgeDot1dPortTable_request;
	uint ieee8021BridgeDot1dPortTable_refs;
	uint ieee8021BridgeDot1dPortTable_id;
	ulong ieee8021BridgeBasePortComponentId;	/* NoAccess */
	ulong ieee8021BridgeBasePort;	/* NoAccess */
	long ieee8021BridgeDot1dPortRowStatus;	/* Create */
};

/* storage declarations */
extern struct ieee8021BridgeMib_data *ieee8021BridgeMibStorage;
extern struct header_complex_index *ieee8021BridgeBaseTableStorage;
extern struct header_complex_index *ieee8021BridgeBasePortTableStorage;
extern struct header_complex_index *ieee8021BridgeBaseIfToPortTableStorage;
extern struct header_complex_index *ieee8021BridgePhyPortTableStorage;
extern struct header_complex_index *ieee8021BridgeTpPortTableStorage;
extern struct header_complex_index *ieee8021BridgePortPriorityTableStorage;
extern struct header_complex_index *ieee8021BridgeUserPriorityRegenTableStorage;
extern struct header_complex_index *ieee8021BridgeTrafficClassTableStorage;
extern struct header_complex_index *ieee8021BridgePortOutboundAccessPriorityTableStorage;
extern struct header_complex_index *ieee8021BridgePortDecodingTableStorage;
extern struct header_complex_index *ieee8021BridgePortEncodingTableStorage;
extern struct header_complex_index *ieee8021BridgeServiceAccessPriorityTableStorage;
extern struct header_complex_index *ieee8021BridgePortMrpTableStorage;
extern struct header_complex_index *ieee8021BridgePortMmrpTableStorage;
extern struct header_complex_index *ieee8021BridgeILanIfTableStorage;
extern struct header_complex_index *ieee8021BridgeDot1dPortTableStorage;

/* enum definitions from the covered mib sections */

#define IEEE8021BRIDGEBASECOMPONENTTYPE_ICOMPONENT 1
#define IEEE8021BRIDGEBASECOMPONENTTYPE_BCOMPONENT 2
#define IEEE8021BRIDGEBASECOMPONENTTYPE_CVLANCOMPONENT 3
#define IEEE8021BRIDGEBASECOMPONENTTYPE_SVLANCOMPONENT 4
#define IEEE8021BRIDGEBASECOMPONENTTYPE_DBRIDGECOMPONENT 5
#define IEEE8021BRIDGEBASECOMPONENTTYPE_ERCOMPONENT 6
#define IEEE8021BRIDGEBASECOMPONENTTYPE_TCOMPONENT 7

#define IEEE8021BRIDGEBASEDEVICECAPABILITIES_DOT1DEXTENDEDFILTERINGSERVICES 0
#define IEEE8021BRIDGEBASEDEVICECAPABILITIES_DOT1DTRAFFICCLASSES 1
#define IEEE8021BRIDGEBASEDEVICECAPABILITIES_DOT1QSTATICENTRYINDIVIDUALPORT 2
#define IEEE8021BRIDGEBASEDEVICECAPABILITIES_DOT1QIVLCAPABLE 3
#define IEEE8021BRIDGEBASEDEVICECAPABILITIES_DOT1QSVLCAPABLE 4
#define IEEE8021BRIDGEBASEDEVICECAPABILITIES_DOT1QHYBRIDCAPABLE 5
#define IEEE8021BRIDGEBASEDEVICECAPABILITIES_DOT1QCONFIGURABLEPVIDTAGGING 6
#define IEEE8021BRIDGEBASEDEVICECAPABILITIES_DOT1DLOCALVLANCAPABLE 7

#define IEEE8021BRIDGEBASETRAFFICCLASSESENABLED_TRUE 1
#define IEEE8021BRIDGEBASETRAFFICCLASSESENABLED_FALSE 2

#define IEEE8021BRIDGEBASEMMRPENABLEDSTATUS_TRUE 1
#define IEEE8021BRIDGEBASEMMRPENABLEDSTATUS_FALSE 2

#define IEEE8021BRIDGEBASEPORTCAPABILITIES_DOT1QDOT1QTAGGING 0
#define IEEE8021BRIDGEBASEPORTCAPABILITIES_DOT1QCONFIGURABLEACCEPTABLEFRAMETYPES 1
#define IEEE8021BRIDGEBASEPORTCAPABILITIES_DOT1QINGRESSFILTERING 2

#define IEEE8021BRIDGEBASEPORTTYPECAPABILITIES_CUSTOMERVLANPORT 0
#define IEEE8021BRIDGEBASEPORTTYPECAPABILITIES_PROVIDERNETWORKPORT 1
#define IEEE8021BRIDGEBASEPORTTYPECAPABILITIES_CUSTOMERNETWORKPORT 2
#define IEEE8021BRIDGEBASEPORTTYPECAPABILITIES_CUSTOMEREDGEPORT 3
#define IEEE8021BRIDGEBASEPORTTYPECAPABILITIES_CUSTOMERBACKBONEPORT 4
#define IEEE8021BRIDGEBASEPORTTYPECAPABILITIES_VIRTUALINSTANCEPORT 5
#define IEEE8021BRIDGEBASEPORTTYPECAPABILITIES_DBRIDGEPORT 6
#define IEEE8021BRIDGEBASEPORTTYPECAPABILITIES_REMOTECUSTOMERACCESSPORT 7
#define IEEE8021BRIDGEBASEPORTTYPECAPABILITIES_STATIONFACINGBRIDGEPORT 8
#define IEEE8021BRIDGEBASEPORTTYPECAPABILITIES_UPLINKACCESSPORT 9
#define IEEE8021BRIDGEBASEPORTTYPECAPABILITIES_UPLINKRELAYPORT 10

#define IEEE8021BRIDGEBASEPORTTYPE_NONE          1
#define IEEE8021BRIDGEBASEPORTTYPE_CUSTOMERVLANPORT 2
#define IEEE8021BRIDGEBASEPORTTYPE_PROVIDERNETWORKPORT 3
#define IEEE8021BRIDGEBASEPORTTYPE_CUSTOMERNETWORKPORT 4
#define IEEE8021BRIDGEBASEPORTTYPE_CUSTOMEREDGEPORT 5
#define IEEE8021BRIDGEBASEPORTTYPE_CUSTOMERBACKBONEPORT 6
#define IEEE8021BRIDGEBASEPORTTYPE_VIRTUALINSTANCEPORT 7
#define IEEE8021BRIDGEBASEPORTTYPE_DBRIDGEPORT   8
#define IEEE8021BRIDGEBASEPORTTYPE_REMOTECUSTOMERACCESSPORT 9
#define IEEE8021BRIDGEBASEPORTTYPE_STATIONFACINGBRIDGEPORT 10
#define IEEE8021BRIDGEBASEPORTTYPE_UPLINKACCESSPORT 11
#define IEEE8021BRIDGEBASEPORTTYPE_UPLINKRELAYPORT 12

#define IEEE8021BRIDGEBASEPORTEXTERNAL_TRUE      1
#define IEEE8021BRIDGEBASEPORTEXTERNAL_FALSE     2

#define IEEE8021BRIDGEBASEPORTADMINPOINTTOPOINT_FORCETRUE 1
#define IEEE8021BRIDGEBASEPORTADMINPOINTTOPOINT_FORCEFALSE 2
#define IEEE8021BRIDGEBASEPORTADMINPOINTTOPOINT_AUTO 3

#define IEEE8021BRIDGEBASEPORTOPERPOINTTOPOINT_TRUE 1
#define IEEE8021BRIDGEBASEPORTOPERPOINTTOPOINT_FALSE 2

#define IEEE8021BRIDGEPORTPRIORITYCODEPOINTSELECTION_CODEPOINT8P0D 1
#define IEEE8021BRIDGEPORTPRIORITYCODEPOINTSELECTION_CODEPOINT7P1D 2
#define IEEE8021BRIDGEPORTPRIORITYCODEPOINTSELECTION_CODEPOINT6P2D 3
#define IEEE8021BRIDGEPORTPRIORITYCODEPOINTSELECTION_CODEPOINT5P3D 4

#define IEEE8021BRIDGEPORTUSEDEI_TRUE            1
#define IEEE8021BRIDGEPORTUSEDEI_FALSE           2

#define IEEE8021BRIDGEPORTREQUIREDROPENCODING_TRUE 1
#define IEEE8021BRIDGEPORTREQUIREDROPENCODING_FALSE 2

#define IEEE8021BRIDGEPORTSERVICEACCESSPRIORITYSELECTION_TRUE 1
#define IEEE8021BRIDGEPORTSERVICEACCESSPRIORITYSELECTION_FALSE 2

#define IEEE8021BRIDGEPORTDECODINGPRIORITYCODEPOINTROW_CODEPOINT8P0D 1
#define IEEE8021BRIDGEPORTDECODINGPRIORITYCODEPOINTROW_CODEPOINT7P1D 2
#define IEEE8021BRIDGEPORTDECODINGPRIORITYCODEPOINTROW_CODEPOINT6P2D 3
#define IEEE8021BRIDGEPORTDECODINGPRIORITYCODEPOINTROW_CODEPOINT5P3D 4

#define IEEE8021BRIDGEPORTDECODINGDROPELIGIBLE_TRUE 1
#define IEEE8021BRIDGEPORTDECODINGDROPELIGIBLE_FALSE 2

#define IEEE8021BRIDGEPORTENCODINGPRIORITYCODEPOINTROW_CODEPOINT8P0D 1
#define IEEE8021BRIDGEPORTENCODINGPRIORITYCODEPOINTROW_CODEPOINT7P1D 2
#define IEEE8021BRIDGEPORTENCODINGPRIORITYCODEPOINTROW_CODEPOINT6P2D 3
#define IEEE8021BRIDGEPORTENCODINGPRIORITYCODEPOINTROW_CODEPOINT5P3D 4

#define IEEE8021BRIDGEPORTENCODINGDROPELIGIBLE_TRUE 1
#define IEEE8021BRIDGEPORTENCODINGDROPELIGIBLE_FALSE 2

#define IEEE8021BRIDGEPORTMMRPENABLEDSTATUS_TRUE 1
#define IEEE8021BRIDGEPORTMMRPENABLEDSTATUS_FALSE 2

#define IEEE8021BRIDGEPORTRESTRICTEDGROUPREGISTRATION_TRUE 1
#define IEEE8021BRIDGEPORTRESTRICTEDGROUPREGISTRATION_FALSE 2

/* notifications */

/* scalars accessible only for notify */

/* object id definitions */
extern oid ieee8021BridgeCompliance_oid[11];
extern oid ieee8021BridgePriorityAndMulticastFilteringCompliance_oid[11];
extern oid ieee8021BridgeCompliance1_oid[11];
extern oid ieee8021BridgeBaseBridgeGroup_oid[11];
extern oid ieee8021BridgeBasePortGroup_oid[11];
extern oid ieee8021BridgeCapGroup_oid[11];
extern oid ieee8021BridgeDeviceMmrpGroup_oid[11];
extern oid ieee8021BridgeTpPortGroup_oid[11];
extern oid ieee8021BridgeDevicePriorityGroup_oid[11];
extern oid ieee8021BridgeDefaultPriorityGroup_oid[11];
extern oid ieee8021BridgeRegenPriorityGroup_oid[11];
extern oid ieee8021BridgePriorityGroup_oid[11];
extern oid ieee8021BridgeAccessPriorityGroup_oid[11];
extern oid ieee8021BridgePortMrpGroup_oid[11];
extern oid ieee8021BridgePortMmrpGroup_oid[11];
extern oid ieee8021BridgePortDecodingGroup_oid[11];
extern oid ieee8021BridgePortEncodingGroup_oid[11];
extern oid ieee8021BridgeServiceAccessPriorityGroup_oid[11];
extern oid ieee8021BridgeInternalLANGroup_oid[11];
extern oid ieee8021BridgeCreatableBaseBridgeGroup_oid[11];
extern oid ieee8021BridgeDot1dDynamicPortCreationGroup_oid[11];
extern oid ieee8021BridgeBaseIfToPortGroup_oid[11];
extern oid ieee8021BridgePhyPortGroup_oid[11];

/* function prototypes */
/* trap function prototypes */

/* variable function prototypes */
void init_ieee8021BridgeMib(void);
void deinit_ieee8021BridgeMib(void);
int term_ieee8021BridgeMib(int majorID, int minorID, void *serverarg, void *clientarg);
FindVarMethod var_ieee8021BridgeMib;
struct ieee8021BridgeMib_data *ieee8021BridgeMib_create(void);
struct ieee8021BridgeMib_data *ieee8021BridgeMib_duplicate(struct ieee8021BridgeMib_data *);
int ieee8021BridgeMib_destroy(struct ieee8021BridgeMib_data **);
int ieee8021BridgeMib_add(struct ieee8021BridgeMib_data *);
void parse_ieee8021BridgeMib(const char *, char *);
SNMPCallback store_ieee8021BridgeMib;
void refresh_ieee8021BridgeMib(int);
FindVarMethod var_ieee8021BridgeBaseTable;
struct ieee8021BridgeBaseTable_data *ieee8021BridgeBaseTable_create(void);
struct ieee8021BridgeBaseTable_data *ieee8021BridgeBaseTable_duplicate(struct ieee8021BridgeBaseTable_data *);
int ieee8021BridgeBaseTable_destroy(struct ieee8021BridgeBaseTable_data **);
int ieee8021BridgeBaseTable_add(struct ieee8021BridgeBaseTable_data *);
int ieee8021BridgeBaseTable_del(struct ieee8021BridgeBaseTable_data *);
void parse_ieee8021BridgeBaseTable(const char *, char *);
SNMPCallback store_ieee8021BridgeBaseTable;
void refresh_ieee8021BridgeBaseTable(int);
FindVarMethod var_ieee8021BridgeBasePortTable;
struct ieee8021BridgeBasePortTable_data *ieee8021BridgeBasePortTable_create(void);
struct ieee8021BridgeBasePortTable_data *ieee8021BridgeBasePortTable_duplicate(struct ieee8021BridgeBasePortTable_data *);
int ieee8021BridgeBasePortTable_destroy(struct ieee8021BridgeBasePortTable_data **);
int ieee8021BridgeBasePortTable_add(struct ieee8021BridgeBasePortTable_data *);
int ieee8021BridgeBasePortTable_del(struct ieee8021BridgeBasePortTable_data *);
void parse_ieee8021BridgeBasePortTable(const char *, char *);
SNMPCallback store_ieee8021BridgeBasePortTable;
void refresh_ieee8021BridgeBasePortTable(int);
FindVarMethod var_ieee8021BridgeBaseIfToPortTable;
struct ieee8021BridgeBaseIfToPortTable_data *ieee8021BridgeBaseIfToPortTable_create(void);
struct ieee8021BridgeBaseIfToPortTable_data *ieee8021BridgeBaseIfToPortTable_duplicate(struct ieee8021BridgeBaseIfToPortTable_data *);
int ieee8021BridgeBaseIfToPortTable_destroy(struct ieee8021BridgeBaseIfToPortTable_data **);
int ieee8021BridgeBaseIfToPortTable_add(struct ieee8021BridgeBaseIfToPortTable_data *);
int ieee8021BridgeBaseIfToPortTable_del(struct ieee8021BridgeBaseIfToPortTable_data *);
void parse_ieee8021BridgeBaseIfToPortTable(const char *, char *);
SNMPCallback store_ieee8021BridgeBaseIfToPortTable;
void refresh_ieee8021BridgeBaseIfToPortTable(int);
FindVarMethod var_ieee8021BridgePhyPortTable;
struct ieee8021BridgePhyPortTable_data *ieee8021BridgePhyPortTable_create(void);
struct ieee8021BridgePhyPortTable_data *ieee8021BridgePhyPortTable_duplicate(struct ieee8021BridgePhyPortTable_data *);
int ieee8021BridgePhyPortTable_destroy(struct ieee8021BridgePhyPortTable_data **);
int ieee8021BridgePhyPortTable_add(struct ieee8021BridgePhyPortTable_data *);
int ieee8021BridgePhyPortTable_del(struct ieee8021BridgePhyPortTable_data *);
void parse_ieee8021BridgePhyPortTable(const char *, char *);
SNMPCallback store_ieee8021BridgePhyPortTable;
void refresh_ieee8021BridgePhyPortTable(int);
FindVarMethod var_ieee8021BridgeTpPortTable;
struct ieee8021BridgeTpPortTable_data *ieee8021BridgeTpPortTable_create(void);
struct ieee8021BridgeTpPortTable_data *ieee8021BridgeTpPortTable_duplicate(struct ieee8021BridgeTpPortTable_data *);
int ieee8021BridgeTpPortTable_destroy(struct ieee8021BridgeTpPortTable_data **);
int ieee8021BridgeTpPortTable_add(struct ieee8021BridgeTpPortTable_data *);
int ieee8021BridgeTpPortTable_del(struct ieee8021BridgeTpPortTable_data *);
void parse_ieee8021BridgeTpPortTable(const char *, char *);
SNMPCallback store_ieee8021BridgeTpPortTable;
void refresh_ieee8021BridgeTpPortTable(int);
FindVarMethod var_ieee8021BridgePortPriorityTable;
struct ieee8021BridgePortPriorityTable_data *ieee8021BridgePortPriorityTable_create(void);
struct ieee8021BridgePortPriorityTable_data *ieee8021BridgePortPriorityTable_duplicate(struct ieee8021BridgePortPriorityTable_data *);
int ieee8021BridgePortPriorityTable_destroy(struct ieee8021BridgePortPriorityTable_data **);
int ieee8021BridgePortPriorityTable_add(struct ieee8021BridgePortPriorityTable_data *);
int ieee8021BridgePortPriorityTable_del(struct ieee8021BridgePortPriorityTable_data *);
void parse_ieee8021BridgePortPriorityTable(const char *, char *);
SNMPCallback store_ieee8021BridgePortPriorityTable;
void refresh_ieee8021BridgePortPriorityTable(int);
FindVarMethod var_ieee8021BridgeUserPriorityRegenTable;
struct ieee8021BridgeUserPriorityRegenTable_data *ieee8021BridgeUserPriorityRegenTable_create(void);
struct ieee8021BridgeUserPriorityRegenTable_data *ieee8021BridgeUserPriorityRegenTable_duplicate(struct ieee8021BridgeUserPriorityRegenTable_data *);
int ieee8021BridgeUserPriorityRegenTable_destroy(struct ieee8021BridgeUserPriorityRegenTable_data **);
int ieee8021BridgeUserPriorityRegenTable_add(struct ieee8021BridgeUserPriorityRegenTable_data *);
int ieee8021BridgeUserPriorityRegenTable_del(struct ieee8021BridgeUserPriorityRegenTable_data *);
void parse_ieee8021BridgeUserPriorityRegenTable(const char *, char *);
SNMPCallback store_ieee8021BridgeUserPriorityRegenTable;
void refresh_ieee8021BridgeUserPriorityRegenTable(int);
FindVarMethod var_ieee8021BridgeTrafficClassTable;
struct ieee8021BridgeTrafficClassTable_data *ieee8021BridgeTrafficClassTable_create(void);
struct ieee8021BridgeTrafficClassTable_data *ieee8021BridgeTrafficClassTable_duplicate(struct ieee8021BridgeTrafficClassTable_data *);
int ieee8021BridgeTrafficClassTable_destroy(struct ieee8021BridgeTrafficClassTable_data **);
int ieee8021BridgeTrafficClassTable_add(struct ieee8021BridgeTrafficClassTable_data *);
int ieee8021BridgeTrafficClassTable_del(struct ieee8021BridgeTrafficClassTable_data *);
void parse_ieee8021BridgeTrafficClassTable(const char *, char *);
SNMPCallback store_ieee8021BridgeTrafficClassTable;
void refresh_ieee8021BridgeTrafficClassTable(int);
FindVarMethod var_ieee8021BridgePortOutboundAccessPriorityTable;
struct ieee8021BridgePortOutboundAccessPriorityTable_data *ieee8021BridgePortOutboundAccessPriorityTable_create(void);
struct ieee8021BridgePortOutboundAccessPriorityTable_data *ieee8021BridgePortOutboundAccessPriorityTable_duplicate(struct ieee8021BridgePortOutboundAccessPriorityTable_data *);
int ieee8021BridgePortOutboundAccessPriorityTable_destroy(struct ieee8021BridgePortOutboundAccessPriorityTable_data **);
int ieee8021BridgePortOutboundAccessPriorityTable_add(struct ieee8021BridgePortOutboundAccessPriorityTable_data *);
int ieee8021BridgePortOutboundAccessPriorityTable_del(struct ieee8021BridgePortOutboundAccessPriorityTable_data *);
void parse_ieee8021BridgePortOutboundAccessPriorityTable(const char *, char *);
SNMPCallback store_ieee8021BridgePortOutboundAccessPriorityTable;
void refresh_ieee8021BridgePortOutboundAccessPriorityTable(int);
FindVarMethod var_ieee8021BridgePortDecodingTable;
struct ieee8021BridgePortDecodingTable_data *ieee8021BridgePortDecodingTable_create(void);
struct ieee8021BridgePortDecodingTable_data *ieee8021BridgePortDecodingTable_duplicate(struct ieee8021BridgePortDecodingTable_data *);
int ieee8021BridgePortDecodingTable_destroy(struct ieee8021BridgePortDecodingTable_data **);
int ieee8021BridgePortDecodingTable_add(struct ieee8021BridgePortDecodingTable_data *);
int ieee8021BridgePortDecodingTable_del(struct ieee8021BridgePortDecodingTable_data *);
void parse_ieee8021BridgePortDecodingTable(const char *, char *);
SNMPCallback store_ieee8021BridgePortDecodingTable;
void refresh_ieee8021BridgePortDecodingTable(int);
FindVarMethod var_ieee8021BridgePortEncodingTable;
struct ieee8021BridgePortEncodingTable_data *ieee8021BridgePortEncodingTable_create(void);
struct ieee8021BridgePortEncodingTable_data *ieee8021BridgePortEncodingTable_duplicate(struct ieee8021BridgePortEncodingTable_data *);
int ieee8021BridgePortEncodingTable_destroy(struct ieee8021BridgePortEncodingTable_data **);
int ieee8021BridgePortEncodingTable_add(struct ieee8021BridgePortEncodingTable_data *);
int ieee8021BridgePortEncodingTable_del(struct ieee8021BridgePortEncodingTable_data *);
void parse_ieee8021BridgePortEncodingTable(const char *, char *);
SNMPCallback store_ieee8021BridgePortEncodingTable;
void refresh_ieee8021BridgePortEncodingTable(int);
FindVarMethod var_ieee8021BridgeServiceAccessPriorityTable;
struct ieee8021BridgeServiceAccessPriorityTable_data *ieee8021BridgeServiceAccessPriorityTable_create(void);
struct ieee8021BridgeServiceAccessPriorityTable_data *ieee8021BridgeServiceAccessPriorityTable_duplicate(struct ieee8021BridgeServiceAccessPriorityTable_data *);
int ieee8021BridgeServiceAccessPriorityTable_destroy(struct ieee8021BridgeServiceAccessPriorityTable_data **);
int ieee8021BridgeServiceAccessPriorityTable_add(struct ieee8021BridgeServiceAccessPriorityTable_data *);
int ieee8021BridgeServiceAccessPriorityTable_del(struct ieee8021BridgeServiceAccessPriorityTable_data *);
void parse_ieee8021BridgeServiceAccessPriorityTable(const char *, char *);
SNMPCallback store_ieee8021BridgeServiceAccessPriorityTable;
void refresh_ieee8021BridgeServiceAccessPriorityTable(int);
FindVarMethod var_ieee8021BridgePortMrpTable;
struct ieee8021BridgePortMrpTable_data *ieee8021BridgePortMrpTable_create(void);
struct ieee8021BridgePortMrpTable_data *ieee8021BridgePortMrpTable_duplicate(struct ieee8021BridgePortMrpTable_data *);
int ieee8021BridgePortMrpTable_destroy(struct ieee8021BridgePortMrpTable_data **);
int ieee8021BridgePortMrpTable_add(struct ieee8021BridgePortMrpTable_data *);
int ieee8021BridgePortMrpTable_del(struct ieee8021BridgePortMrpTable_data *);
void parse_ieee8021BridgePortMrpTable(const char *, char *);
SNMPCallback store_ieee8021BridgePortMrpTable;
void refresh_ieee8021BridgePortMrpTable(int);
FindVarMethod var_ieee8021BridgePortMmrpTable;
struct ieee8021BridgePortMmrpTable_data *ieee8021BridgePortMmrpTable_create(void);
struct ieee8021BridgePortMmrpTable_data *ieee8021BridgePortMmrpTable_duplicate(struct ieee8021BridgePortMmrpTable_data *);
int ieee8021BridgePortMmrpTable_destroy(struct ieee8021BridgePortMmrpTable_data **);
int ieee8021BridgePortMmrpTable_add(struct ieee8021BridgePortMmrpTable_data *);
int ieee8021BridgePortMmrpTable_del(struct ieee8021BridgePortMmrpTable_data *);
void parse_ieee8021BridgePortMmrpTable(const char *, char *);
SNMPCallback store_ieee8021BridgePortMmrpTable;
void refresh_ieee8021BridgePortMmrpTable(int);
FindVarMethod var_ieee8021BridgeILanIfTable;
struct ieee8021BridgeILanIfTable_data *ieee8021BridgeILanIfTable_create(void);
struct ieee8021BridgeILanIfTable_data *ieee8021BridgeILanIfTable_duplicate(struct ieee8021BridgeILanIfTable_data *);
int ieee8021BridgeILanIfTable_destroy(struct ieee8021BridgeILanIfTable_data **);
int ieee8021BridgeILanIfTable_add(struct ieee8021BridgeILanIfTable_data *);
int ieee8021BridgeILanIfTable_del(struct ieee8021BridgeILanIfTable_data *);
void parse_ieee8021BridgeILanIfTable(const char *, char *);
SNMPCallback store_ieee8021BridgeILanIfTable;
void refresh_ieee8021BridgeILanIfTable(int);
FindVarMethod var_ieee8021BridgeDot1dPortTable;
struct ieee8021BridgeDot1dPortTable_data *ieee8021BridgeDot1dPortTable_create(void);
struct ieee8021BridgeDot1dPortTable_data *ieee8021BridgeDot1dPortTable_duplicate(struct ieee8021BridgeDot1dPortTable_data *);
int ieee8021BridgeDot1dPortTable_destroy(struct ieee8021BridgeDot1dPortTable_data **);
int ieee8021BridgeDot1dPortTable_add(struct ieee8021BridgeDot1dPortTable_data *);
int ieee8021BridgeDot1dPortTable_del(struct ieee8021BridgeDot1dPortTable_data *);
void parse_ieee8021BridgeDot1dPortTable(const char *, char *);
SNMPCallback store_ieee8021BridgeDot1dPortTable;
void refresh_ieee8021BridgeDot1dPortTable(int);

WriteMethod write_ieee8021BridgeBaseBridgeAddress;
WriteMethod write_ieee8021BridgeBaseComponentType;
WriteMethod write_ieee8021BridgeBaseDeviceCapabilities;
WriteMethod write_ieee8021BridgeBaseTrafficClassesEnabled;
WriteMethod write_ieee8021BridgeBaseMmrpEnabledStatus;
WriteMethod write_ieee8021BridgeBaseRowStatus;
WriteMethod write_ieee8021BridgeBasePortIfIndex;
WriteMethod write_ieee8021BridgeBasePortAdminPointToPoint;
WriteMethod write_ieee8021BridgePortDefaultUserPriority;
WriteMethod write_ieee8021BridgePortNumTrafficClasses;
WriteMethod write_ieee8021BridgePortPriorityCodePointSelection;
WriteMethod write_ieee8021BridgePortUseDEI;
WriteMethod write_ieee8021BridgePortRequireDropEncoding;
WriteMethod write_ieee8021BridgePortServiceAccessPrioritySelection;
WriteMethod write_ieee8021BridgeRegenUserPriority;
WriteMethod write_ieee8021BridgeTrafficClass;
WriteMethod write_ieee8021BridgeRegenUserPriority;
WriteMethod write_ieee8021BridgePortDecodingPriority;
WriteMethod write_ieee8021BridgePortDecodingDropEligible;
WriteMethod write_ieee8021BridgePortEncodingPriority;
WriteMethod write_ieee8021BridgeServiceAccessPriorityValue;
WriteMethod write_ieee8021BridgePortMrpJoinTime;
WriteMethod write_ieee8021BridgePortMrpLeaveTime;
WriteMethod write_ieee8021BridgePortMrpLeaveAllTime;
WriteMethod write_ieee8021BridgePortMmrpEnabledStatus;
WriteMethod write_ieee8021BridgePortRestrictedGroupRegistration;
WriteMethod write_ieee8021BridgeILanIfRowStatus;
WriteMethod write_ieee8021BridgeDot1dPortRowStatus;
#endif				/* __LOCAL_IEEE8021BRIDGEMIB_H__ */
