/*****************************************************************************

 @(#) src/snmp/ieee8021ddcfmmib.h

 -----------------------------------------------------------------------------

 Copyright (c) 2008-2015  Monavacon Limited <http://www.monavacon.com/>
 Copyright (c) 2001-2008  OpenSS7 Corporation <http://www.openss7.com/>
 Copyright (c) 1997-2001  Brian F. G. Bidulock <bidulock@openss7.org>

 All Rights Reserved.

 This program is free software; you can redistribute it and/or modify it under
 the terms of the GNU Affero General Public License as published by the Free
 Software Foundation; version 3 of the License.

 This program is distributed in the hope that it will be useful, but WITHOUT
 ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
 details.

 You should have received a copy of the GNU Affero General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>, or
 write to the Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA
 02139, USA.

 -----------------------------------------------------------------------------

 U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software on
 behalf of the U.S. Government ("Government"), the following provisions apply
 to you.  If the Software is supplied by the Department of Defense ("DoD"), it
 is classified as "Commercial Computer Software" under paragraph 252.227-7014
 of the DoD Supplement to the Federal Acquisition Regulations ("DFARS") (or any
 successor regulations) and the Government is acquiring only the license rights
 granted herein (the license rights customarily provided to non-Government
 users).  If the Software is supplied to any unit or agency of the Government
 other than DoD, it is classified as "Restricted Computer Software" and the
 Government's rights in the Software are defined in paragraph 52.227-19 of the
 Federal Acquisition Regulations ("FAR") (or any successor regulations) or, in
 the cases of NASA, in paragraph 18.52.227-86 of the NASA Supplement to the FAR
 (or any successor regulations).

 -----------------------------------------------------------------------------

 Commercial licensing and support of this software is available from OpenSS7
 Corporation at a fee.  See http://www.openss7.com/

 *****************************************************************************/

#ifndef __LOCAL_IEEE8021DDCFMMIB_H__
#define __LOCAL_IEEE8021DDCFMMIB_H__

/*
 * This file was generated by mib2c and is intended for use as a mib module
 * for the ucd-snmp snmpd agent.
 */

extern const char sa_program[];
extern int sa_fclose;			/* default close files between requests */
extern int sa_changed;			/* indication to reread MIB configuration */
extern int sa_stats_refresh;		/* indications that statistics, the mib or its tables need to be refreshed */
extern int sa_request;			/* request number for per-request actions */

/* our storage structure(s) */
struct ieee8021DdcfmMIB_data {
	struct ieee8021DdcfmMIB_data *ieee8021DdcfmMIB_old;
	uint ieee8021DdcfmMIB_rsvs;
	uint ieee8021DdcfmMIB_tsts;
	uint ieee8021DdcfmMIB_sets;
	uint ieee8021DdcfmMIB_request;
};
struct ieee8021DdcfmStackTable_data {
	struct ieee8021DdcfmStackTable_data *ieee8021DdcfmStackTable_old;
	uint ieee8021DdcfmStackTable_rsvs;
	uint ieee8021DdcfmStackTable_tsts;
	uint ieee8021DdcfmStackTable_sets;
	uint ieee8021DdcfmStackTable_request;
	uint ieee8021DdcfmStackTable_refs;
	uint ieee8021DdcfmStackTable_id;
	long ieee8021DdcfmStackIfIndex;	/* NoAccess */
	long ieee8021DdcfmStackRrMdLevel;	/* ReadOnly */
	long ieee8021DdcfmStackRrDirection;	/* ReadOnly */
	long ieee8021DdcfmStackRFMreceiverMdLevel;	/* ReadOnly */
	long ieee8021DdcfmStackDrMdLevel;	/* ReadOnly */
	long ieee8021DdcfmStackDrVlanIdOrNone;	/* ReadOnly */
	long ieee8021DdcfmStackSFMOriginatorMdLevel;	/* ReadOnly */
	long ieee8021DdcfmStackSFMOriginatorVlanIdOrNone;	/* ReadOnly */
	long ieee8021DdcfmStackSFMOriginatorDirection;	/* ReadOnly */
};
struct ieee8021DdcfmRrTable_data {
	struct ieee8021DdcfmRrTable_data *ieee8021DdcfmRrTable_old;
	uint ieee8021DdcfmRrTable_rsvs;
	uint ieee8021DdcfmRrTable_tsts;
	uint ieee8021DdcfmRrTable_sets;
	uint ieee8021DdcfmRrTable_request;
	uint ieee8021DdcfmRrTable_refs;
	uint ieee8021DdcfmRrTable_id;
	long ieee8021DdcfmRrIfIndex;	/* NoAccess */
	long ieee8021DdcfmRrMdIndex;	/* NoAccess */
	long ieee8021DdcfmRrDirection;	/* NoAccess */
	long ieee8021DdcfmRrPrimaryVlanIdOrNone;	/* Create */
	uint8_t *ieee8021DdcfmRrFilter;	/* Create */
	size_t ieee8021DdcfmRrFilterLen;
	ulong ieee8021DdcfmRrSamplingInterval;	/* Create */
	uint8_t *ieee8021DdcfmRrTargetAddress;	/* Create */
	size_t ieee8021DdcfmRrTargetAddressLen;
	long ieee8021DdcfmRrContinueFlag;	/* Create */
	ulong ieee8021DdcfmRrDuration;	/* Create */
	long ieee8021DdcfmRrDurationInTimeFlag;	/* Create */
	long ieee8021DdcfmRrVlanPriority;	/* Create */
	long ieee8021DdcfmRrVlanDropEligible;	/* Create */
	long ieee8021DdcfmRrFloodingFlag;	/* Create */
	long ieee8021DdcfmRrTruncationFlag;	/* Create */
	long ieee8021DdcfmRrActivationStatus;	/* ReadOnly */
	ulong ieee8021DdcfmRrRemainDuration;	/* ReadOnly */
	ulong ieee8021DdcfmRrNextRfmTransID;	/* ReadOnly */
	long ieee8021DdcfmRrRowStatus;	/* Create */
};
struct ieee8021DdcfmRFMReceiverTable_data {
	struct ieee8021DdcfmRFMReceiverTable_data *ieee8021DdcfmRFMReceiverTable_old;
	uint ieee8021DdcfmRFMReceiverTable_rsvs;
	uint ieee8021DdcfmRFMReceiverTable_tsts;
	uint ieee8021DdcfmRFMReceiverTable_sets;
	uint ieee8021DdcfmRFMReceiverTable_request;
	uint ieee8021DdcfmRFMReceiverTable_refs;
	uint ieee8021DdcfmRFMReceiverTable_id;
	long ieee8021DdcfmRfmReceiverIfIndex;	/* NoAccess */
	long ieee8021DdcfmRfmReceiverMdIndex;	/* NoAccess */
	long ieee8021DdcfmRFMRowStatus;	/* Create */
};
struct ieee8021DdcfmDrTable_data {
	struct ieee8021DdcfmDrTable_data *ieee8021DdcfmDrTable_old;
	uint ieee8021DdcfmDrTable_rsvs;
	uint ieee8021DdcfmDrTable_tsts;
	uint ieee8021DdcfmDrTable_sets;
	uint ieee8021DdcfmDrTable_request;
	uint ieee8021DdcfmDrTable_refs;
	uint ieee8021DdcfmDrTable_id;
	long ieee8021DdcfmDrIfIndex;	/* NoAccess */
	long ieee8021DdcfmDrMdIndex;	/* NoAccess */
	long ieee8021DdcfmDrVlanIdOrNone;	/* NoAccess */
	uint8_t *ieee8021DdcfmDrSfmOriginator;	/* Create */
	size_t ieee8021DdcfmDrSfmOriginatorLen;
	long ieee8021DdcfmDrSourceAddressStayFlag;	/* Create */
	long ieee8021DdcfmDrFloodingFlag;	/* Create */
	ulong ieee8021DdcfmDrDuration;	/* Create */
	long ieee8021DdcfmDrActivationStatus;	/* ReadOnly */
	ulong ieee8021DdcfmDrRemainDuration;	/* ReadOnly */
	ulong ieee8021DdcfmDrSFMsequenceErrors;	/* ReadOnly */
	long ieee8021DdcfmDrRowStatus;	/* Create */
};
struct ieee8021DdcfmSoTable_data {
	struct ieee8021DdcfmSoTable_data *ieee8021DdcfmSoTable_old;
	uint ieee8021DdcfmSoTable_rsvs;
	uint ieee8021DdcfmSoTable_tsts;
	uint ieee8021DdcfmSoTable_sets;
	uint ieee8021DdcfmSoTable_request;
	uint ieee8021DdcfmSoTable_refs;
	uint ieee8021DdcfmSoTable_id;
	long ieee8021DdcfmSfmIfIndex;	/* NoAccess */
	long ieee8021DdcfmSoMdIndex;	/* NoAccess */
	long ieee8021DdcfmSoVlanIdOrNone;	/* NoAccess */
	long ieee8021DdcfmSoDirection;	/* NoAccess */
	uint8_t *ieee8021DdcfmSoDrMacAddress;	/* Create */
	size_t ieee8021DdcfmSoDrMacAddressLen;
	ulong ieee8021DdcfmSoDuration;	/* Create */
	long ieee8021DdcfmSoActivationStatus;	/* ReadOnly */
	ulong ieee8021DdcfmSoRemainDuration;	/* ReadOnly */
	long ieee8021DdcfmSoRowStatus;	/* Create */
};

/* storage declarations */
extern struct ieee8021DdcfmMIB_data *ieee8021DdcfmMIBStorage;
extern struct header_complex_index *ieee8021DdcfmStackTableStorage;
extern struct header_complex_index *ieee8021DdcfmRrTableStorage;
extern struct header_complex_index *ieee8021DdcfmRFMReceiverTableStorage;
extern struct header_complex_index *ieee8021DdcfmDrTableStorage;
extern struct header_complex_index *ieee8021DdcfmSoTableStorage;

/* enum definitions from the covered mib sections */

#define IEEE8021DDCFMSTACKRRDIRECTION_DOWN       1
#define IEEE8021DDCFMSTACKRRDIRECTION_UP         2

#define IEEE8021DDCFMSTACKSFMORIGINATORDIRECTION_DOWN 1
#define IEEE8021DDCFMSTACKSFMORIGINATORDIRECTION_UP 2

#define IEEE8021DDCFMRRDIRECTION_DOWN            1
#define IEEE8021DDCFMRRDIRECTION_UP              2

#define IEEE8021DDCFMRRCONTINUEFLAG_TRUE         1
#define IEEE8021DDCFMRRCONTINUEFLAG_FALSE        2

#define IEEE8021DDCFMRRDURATIONINTIMEFLAG_TRUE   1
#define IEEE8021DDCFMRRDURATIONINTIMEFLAG_FALSE  2

#define IEEE8021DDCFMRRVLANDROPELIGIBLE_TRUE     1
#define IEEE8021DDCFMRRVLANDROPELIGIBLE_FALSE    2

#define IEEE8021DDCFMRRFLOODINGFLAG_TRUE         1
#define IEEE8021DDCFMRRFLOODINGFLAG_FALSE        2

#define IEEE8021DDCFMRRTRUNCATIONFLAG_TRUE       1
#define IEEE8021DDCFMRRTRUNCATIONFLAG_FALSE      2

#define IEEE8021DDCFMRRACTIVATIONSTATUS_TRUE     1
#define IEEE8021DDCFMRRACTIVATIONSTATUS_FALSE    2

#define IEEE8021DDCFMDRSOURCEADDRESSSTAYFLAG_TRUE 1
#define IEEE8021DDCFMDRSOURCEADDRESSSTAYFLAG_FALSE 2

#define IEEE8021DDCFMDRFLOODINGFLAG_TRUE         1
#define IEEE8021DDCFMDRFLOODINGFLAG_FALSE        2

#define IEEE8021DDCFMDRACTIVATIONSTATUS_TRUE     1
#define IEEE8021DDCFMDRACTIVATIONSTATUS_FALSE    2

#define IEEE8021DDCFMSODIRECTION_DOWN            1
#define IEEE8021DDCFMSODIRECTION_UP              2

#define IEEE8021DDCFMSOACTIVATIONSTATUS_TRUE     1
#define IEEE8021DDCFMSOACTIVATIONSTATUS_FALSE    2

/* notifications */

/* scalars accessible only for notify */

/* object id definitions */
extern oid ieee8021DdcfmCompliance_oid[11];
extern oid ieee8021DdcfmStackGroup_oid[11];
extern oid ieee8021DdcfmRrGroup_oid[11];
extern oid ieee8021DdcfmRFMReceiverGroup_oid[11];
extern oid ieee8021DdcfmDrGroup_oid[11];
extern oid ieee8021DdcfmSoGroup_oid[11];

/* function prototypes */
/* trap function prototypes */

/* variable function prototypes */
void init_ieee8021DdcfmMIB(void);
void deinit_ieee8021DdcfmMIB(void);
int term_ieee8021DdcfmMIB(int majorID, int minorID, void *serverarg, void *clientarg);
FindVarMethod var_ieee8021DdcfmMIB;
struct ieee8021DdcfmMIB_data *ieee8021DdcfmMIB_create(void);
struct ieee8021DdcfmMIB_data *ieee8021DdcfmMIB_duplicate(struct ieee8021DdcfmMIB_data *);
int ieee8021DdcfmMIB_destroy(struct ieee8021DdcfmMIB_data **);
int ieee8021DdcfmMIB_add(struct ieee8021DdcfmMIB_data *);
void parse_ieee8021DdcfmMIB(const char *, char *);
SNMPCallback store_ieee8021DdcfmMIB;
void refresh_ieee8021DdcfmMIB(int);
FindVarMethod var_ieee8021DdcfmStackTable;
struct ieee8021DdcfmStackTable_data *ieee8021DdcfmStackTable_create(void);
struct ieee8021DdcfmStackTable_data *ieee8021DdcfmStackTable_duplicate(struct ieee8021DdcfmStackTable_data *);
int ieee8021DdcfmStackTable_destroy(struct ieee8021DdcfmStackTable_data **);
int ieee8021DdcfmStackTable_add(struct ieee8021DdcfmStackTable_data *);
int ieee8021DdcfmStackTable_del(struct ieee8021DdcfmStackTable_data *);
void parse_ieee8021DdcfmStackTable(const char *, char *);
SNMPCallback store_ieee8021DdcfmStackTable;
void refresh_ieee8021DdcfmStackTable(int);
FindVarMethod var_ieee8021DdcfmRrTable;
struct ieee8021DdcfmRrTable_data *ieee8021DdcfmRrTable_create(void);
struct ieee8021DdcfmRrTable_data *ieee8021DdcfmRrTable_duplicate(struct ieee8021DdcfmRrTable_data *);
int ieee8021DdcfmRrTable_destroy(struct ieee8021DdcfmRrTable_data **);
int ieee8021DdcfmRrTable_add(struct ieee8021DdcfmRrTable_data *);
int ieee8021DdcfmRrTable_del(struct ieee8021DdcfmRrTable_data *);
void parse_ieee8021DdcfmRrTable(const char *, char *);
SNMPCallback store_ieee8021DdcfmRrTable;
void refresh_ieee8021DdcfmRrTable(int);
FindVarMethod var_ieee8021DdcfmRFMReceiverTable;
struct ieee8021DdcfmRFMReceiverTable_data *ieee8021DdcfmRFMReceiverTable_create(void);
struct ieee8021DdcfmRFMReceiverTable_data *ieee8021DdcfmRFMReceiverTable_duplicate(struct ieee8021DdcfmRFMReceiverTable_data *);
int ieee8021DdcfmRFMReceiverTable_destroy(struct ieee8021DdcfmRFMReceiverTable_data **);
int ieee8021DdcfmRFMReceiverTable_add(struct ieee8021DdcfmRFMReceiverTable_data *);
int ieee8021DdcfmRFMReceiverTable_del(struct ieee8021DdcfmRFMReceiverTable_data *);
void parse_ieee8021DdcfmRFMReceiverTable(const char *, char *);
SNMPCallback store_ieee8021DdcfmRFMReceiverTable;
void refresh_ieee8021DdcfmRFMReceiverTable(int);
FindVarMethod var_ieee8021DdcfmDrTable;
struct ieee8021DdcfmDrTable_data *ieee8021DdcfmDrTable_create(void);
struct ieee8021DdcfmDrTable_data *ieee8021DdcfmDrTable_duplicate(struct ieee8021DdcfmDrTable_data *);
int ieee8021DdcfmDrTable_destroy(struct ieee8021DdcfmDrTable_data **);
int ieee8021DdcfmDrTable_add(struct ieee8021DdcfmDrTable_data *);
int ieee8021DdcfmDrTable_del(struct ieee8021DdcfmDrTable_data *);
void parse_ieee8021DdcfmDrTable(const char *, char *);
SNMPCallback store_ieee8021DdcfmDrTable;
void refresh_ieee8021DdcfmDrTable(int);
FindVarMethod var_ieee8021DdcfmSoTable;
struct ieee8021DdcfmSoTable_data *ieee8021DdcfmSoTable_create(void);
struct ieee8021DdcfmSoTable_data *ieee8021DdcfmSoTable_duplicate(struct ieee8021DdcfmSoTable_data *);
int ieee8021DdcfmSoTable_destroy(struct ieee8021DdcfmSoTable_data **);
int ieee8021DdcfmSoTable_add(struct ieee8021DdcfmSoTable_data *);
int ieee8021DdcfmSoTable_del(struct ieee8021DdcfmSoTable_data *);
void parse_ieee8021DdcfmSoTable(const char *, char *);
SNMPCallback store_ieee8021DdcfmSoTable;
void refresh_ieee8021DdcfmSoTable(int);

WriteMethod write_ieee8021DdcfmRrPrimaryVlanIdOrNone;
WriteMethod write_ieee8021DdcfmRrFilter;
WriteMethod write_ieee8021DdcfmRrSamplingInterval;
WriteMethod write_ieee8021DdcfmRrTargetAddress;
WriteMethod write_ieee8021DdcfmRrContinueFlag;
WriteMethod write_ieee8021DdcfmRrDuration;
WriteMethod write_ieee8021DdcfmRrDurationInTimeFlag;
WriteMethod write_ieee8021DdcfmRrVlanPriority;
WriteMethod write_ieee8021DdcfmRrVlanDropEligible;
WriteMethod write_ieee8021DdcfmRrFloodingFlag;
WriteMethod write_ieee8021DdcfmRrTruncationFlag;
WriteMethod write_ieee8021DdcfmRrRowStatus;
WriteMethod write_ieee8021DdcfmRFMRowStatus;
WriteMethod write_ieee8021DdcfmDrSfmOriginator;
WriteMethod write_ieee8021DdcfmDrSourceAddressStayFlag;
WriteMethod write_ieee8021DdcfmDrFloodingFlag;
WriteMethod write_ieee8021DdcfmDrDuration;
WriteMethod write_ieee8021DdcfmDrRowStatus;
WriteMethod write_ieee8021DdcfmSoDrMacAddress;
WriteMethod write_ieee8021DdcfmSoDuration;
WriteMethod write_ieee8021DdcfmSoRowStatus;
#endif				/* __LOCAL_IEEE8021DDCFMMIB_H__ */
