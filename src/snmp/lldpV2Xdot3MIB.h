/*****************************************************************************

 @(#) src/snmp/lldpv2xdot3mib.h

 -----------------------------------------------------------------------------

 Copyright (c) 2008-2015  Monavacon Limited <http://www.monavacon.com/>
 Copyright (c) 2001-2008  OpenSS7 Corporation <http://www.openss7.com/>
 Copyright (c) 1997-2001  Brian F. G. Bidulock <bidulock@openss7.org>

 All Rights Reserved.

 This program is free software; you can redistribute it and/or modify it under
 the terms of the GNU Affero General Public License as published by the Free
 Software Foundation; version 3 of the License.

 This program is distributed in the hope that it will be useful, but WITHOUT
 ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
 details.

 You should have received a copy of the GNU Affero General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>, or
 write to the Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA
 02139, USA.

 -----------------------------------------------------------------------------

 U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software on
 behalf of the U.S. Government ("Government"), the following provisions apply
 to you.  If the Software is supplied by the Department of Defense ("DoD"), it
 is classified as "Commercial Computer Software" under paragraph 252.227-7014
 of the DoD Supplement to the Federal Acquisition Regulations ("DFARS") (or any
 successor regulations) and the Government is acquiring only the license rights
 granted herein (the license rights customarily provided to non-Government
 users).  If the Software is supplied to any unit or agency of the Government
 other than DoD, it is classified as "Restricted Computer Software" and the
 Government's rights in the Software are defined in paragraph 52.227-19 of the
 Federal Acquisition Regulations ("FAR") (or any successor regulations) or, in
 the cases of NASA, in paragraph 18.52.227-86 of the NASA Supplement to the FAR
 (or any successor regulations).

 -----------------------------------------------------------------------------

 Commercial licensing and support of this software is available from OpenSS7
 Corporation at a fee.  See http://www.openss7.com/

 *****************************************************************************/

#ifndef __LOCAL_LLDPV2XDOT3MIB_H__
#define __LOCAL_LLDPV2XDOT3MIB_H__

/*
 * This file was generated by mib2c and is intended for use as a mib module
 * for the ucd-snmp snmpd agent.
 */

extern const char sa_program[];
extern int sa_fclose;			/* default close files between requests */
extern int sa_changed;			/* indication to reread MIB configuration */
extern int sa_stats_refresh;		/* indications that statistics, the mib or its tables need to be refreshed */
extern int sa_request;			/* request number for per-request actions */

/* our storage structure(s) */
struct lldpV2Xdot3MIB_data {
	struct lldpV2Xdot3MIB_data *lldpV2Xdot3MIB_old;
	uint lldpV2Xdot3MIB_rsvs;
	uint lldpV2Xdot3MIB_tsts;
	uint lldpV2Xdot3MIB_sets;
	uint lldpV2Xdot3MIB_request;
};
struct lldpV2Xdot3PortConfigTable_data {
	struct lldpV2Xdot3PortConfigTable_data *lldpV2Xdot3PortConfigTable_old;
	uint lldpV2Xdot3PortConfigTable_rsvs;
	uint lldpV2Xdot3PortConfigTable_tsts;
	uint lldpV2Xdot3PortConfigTable_sets;
	uint lldpV2Xdot3PortConfigTable_request;
	uint lldpV2Xdot3PortConfigTable_refs;
	uint lldpV2Xdot3PortConfigTable_id;
	long lldpV2PortConfigIfIndex;	/* NoAccess */
	ulong lldpV2PortConfigDestAddressIndex;	/* NoAccess */
	uint8_t *lldpV2Xdot3PortConfigTLVsTxEnable;	/* ReadWrite */
	size_t lldpV2Xdot3PortConfigTLVsTxEnableLen;
};
struct lldpV2Xdot3LocPortTable_data {
	struct lldpV2Xdot3LocPortTable_data *lldpV2Xdot3LocPortTable_old;
	uint lldpV2Xdot3LocPortTable_rsvs;
	uint lldpV2Xdot3LocPortTable_tsts;
	uint lldpV2Xdot3LocPortTable_sets;
	uint lldpV2Xdot3LocPortTable_request;
	uint lldpV2Xdot3LocPortTable_refs;
	uint lldpV2Xdot3LocPortTable_id;
	long lldpV2LocPortIfIndex;	/* NoAccess */
	long lldpV2Xdot3LocPortAutoNegSupported;	/* ReadOnly */
	long lldpV2Xdot3LocPortAutoNegEnabled;	/* ReadOnly */
	uint8_t *lldpV2Xdot3LocPortAutoNegAdvertisedCap;	/* ReadOnly */
	size_t lldpV2Xdot3LocPortAutoNegAdvertisedCapLen;
	ulong lldpV2Xdot3LocPortOperMauType;	/* ReadOnly */
};
struct lldpV2Xdot3LocPowerTable_data {
	struct lldpV2Xdot3LocPowerTable_data *lldpV2Xdot3LocPowerTable_old;
	uint lldpV2Xdot3LocPowerTable_rsvs;
	uint lldpV2Xdot3LocPowerTable_tsts;
	uint lldpV2Xdot3LocPowerTable_sets;
	uint lldpV2Xdot3LocPowerTable_request;
	uint lldpV2Xdot3LocPowerTable_refs;
	uint lldpV2Xdot3LocPowerTable_id;
	long lldpV2LocPortIfIndex;	/* NoAccess */
	long lldpV2Xdot3LocPowerPortClass;	/* ReadOnly */
	long lldpV2Xdot3LocPowerMDISupported;	/* ReadOnly */
	long lldpV2Xdot3LocPowerMDIEnabled;	/* ReadOnly */
	long lldpV2Xdot3LocPowerPairControlable;	/* ReadOnly */
	ulong lldpV2Xdot3LocPowerPairs;	/* ReadOnly */
	ulong lldpV2Xdot3LocPowerClass;	/* ReadOnly */
};
struct lldpV2Xdot3LocMaxFrameSizeTable_data {
	struct lldpV2Xdot3LocMaxFrameSizeTable_data *lldpV2Xdot3LocMaxFrameSizeTable_old;
	uint lldpV2Xdot3LocMaxFrameSizeTable_rsvs;
	uint lldpV2Xdot3LocMaxFrameSizeTable_tsts;
	uint lldpV2Xdot3LocMaxFrameSizeTable_sets;
	uint lldpV2Xdot3LocMaxFrameSizeTable_request;
	uint lldpV2Xdot3LocMaxFrameSizeTable_refs;
	uint lldpV2Xdot3LocMaxFrameSizeTable_id;
	long lldpV2LocPortIfIndex;	/* NoAccess */
	ulong lldpV2Xdot3LocMaxFrameSize;	/* ReadOnly */
};
struct lldpV2Xdot3RemPortTable_data {
	struct lldpV2Xdot3RemPortTable_data *lldpV2Xdot3RemPortTable_old;
	uint lldpV2Xdot3RemPortTable_rsvs;
	uint lldpV2Xdot3RemPortTable_tsts;
	uint lldpV2Xdot3RemPortTable_sets;
	uint lldpV2Xdot3RemPortTable_request;
	uint lldpV2Xdot3RemPortTable_refs;
	uint lldpV2Xdot3RemPortTable_id;
	long lldpV2RemTimeMark;		/* NoAccess */
	long lldpV2RemLocalIfIndex;	/* NoAccess */
	ulong lldpV2RemLocalDestMACAddress;	/* NoAccess */
	ulong lldpV2RemIndex;		/* NoAccess */
	long lldpV2Xdot3RemPortAutoNegSupported;	/* ReadOnly */
	long lldpV2Xdot3RemPortAutoNegEnabled;	/* ReadOnly */
	uint8_t *lldpV2Xdot3RemPortAutoNegAdvertisedCap;	/* ReadOnly */
	size_t lldpV2Xdot3RemPortAutoNegAdvertisedCapLen;
	ulong lldpV2Xdot3RemPortOperMauType;	/* ReadOnly */
};
struct lldpV2Xdot3RemPowerTable_data {
	struct lldpV2Xdot3RemPowerTable_data *lldpV2Xdot3RemPowerTable_old;
	uint lldpV2Xdot3RemPowerTable_rsvs;
	uint lldpV2Xdot3RemPowerTable_tsts;
	uint lldpV2Xdot3RemPowerTable_sets;
	uint lldpV2Xdot3RemPowerTable_request;
	uint lldpV2Xdot3RemPowerTable_refs;
	uint lldpV2Xdot3RemPowerTable_id;
	long lldpV2RemTimeMark;		/* NoAccess */
	long lldpV2RemLocalIfIndex;	/* NoAccess */
	ulong lldpV2RemLocalDestMACAddress;	/* NoAccess */
	ulong lldpV2RemIndex;		/* NoAccess */
	long lldpV2Xdot3RemPowerPortClass;	/* ReadOnly */
	long lldpV2Xdot3RemPowerMDISupported;	/* ReadOnly */
	long lldpV2Xdot3RemPowerMDIEnabled;	/* ReadOnly */
	long lldpV2Xdot3RemPowerPairControlable;	/* ReadOnly */
	ulong lldpV2Xdot3RemPowerPairs;	/* ReadOnly */
	ulong lldpV2Xdot3RemPowerClass;	/* ReadOnly */
};
struct lldpV2Xdot3RemMaxFrameSizeTable_data {
	struct lldpV2Xdot3RemMaxFrameSizeTable_data *lldpV2Xdot3RemMaxFrameSizeTable_old;
	uint lldpV2Xdot3RemMaxFrameSizeTable_rsvs;
	uint lldpV2Xdot3RemMaxFrameSizeTable_tsts;
	uint lldpV2Xdot3RemMaxFrameSizeTable_sets;
	uint lldpV2Xdot3RemMaxFrameSizeTable_request;
	uint lldpV2Xdot3RemMaxFrameSizeTable_refs;
	uint lldpV2Xdot3RemMaxFrameSizeTable_id;
	long lldpV2RemTimeMark;		/* NoAccess */
	long lldpV2RemLocalIfIndex;	/* NoAccess */
	ulong lldpV2RemLocalDestMACAddress;	/* NoAccess */
	ulong lldpV2RemIndex;		/* NoAccess */
	ulong lldpV2Xdot3RemMaxFrameSize;	/* ReadOnly */
};

/* storage declarations */
extern struct lldpV2Xdot3MIB_data *lldpV2Xdot3MIBStorage;
extern struct header_complex_index *lldpV2Xdot3PortConfigTableStorage;
extern struct header_complex_index *lldpV2Xdot3LocPortTableStorage;
extern struct header_complex_index *lldpV2Xdot3LocPowerTableStorage;
extern struct header_complex_index *lldpV2Xdot3LocMaxFrameSizeTableStorage;
extern struct header_complex_index *lldpV2Xdot3RemPortTableStorage;
extern struct header_complex_index *lldpV2Xdot3RemPowerTableStorage;
extern struct header_complex_index *lldpV2Xdot3RemMaxFrameSizeTableStorage;

/* enum definitions from the covered mib sections */

#define LLDPV2XDOT3PORTCONFIGTLVSTXENABLE_MACPHYCONFIGSTATUS 0
#define LLDPV2XDOT3PORTCONFIGTLVSTXENABLE_POWERVIAMDI 1
#define LLDPV2XDOT3PORTCONFIGTLVSTXENABLE_UNUSED 2
#define LLDPV2XDOT3PORTCONFIGTLVSTXENABLE_MAXFRAMESIZE 3

#define LLDPV2XDOT3LOCPORTAUTONEGSUPPORTED_TRUE  1
#define LLDPV2XDOT3LOCPORTAUTONEGSUPPORTED_FALSE 2

#define LLDPV2XDOT3LOCPORTAUTONEGENABLED_TRUE    1
#define LLDPV2XDOT3LOCPORTAUTONEGENABLED_FALSE   2

#define LLDPV2XDOT3LOCPOWERPORTCLASS_PCLASSPSE   1
#define LLDPV2XDOT3LOCPOWERPORTCLASS_PCLASSPD    2

#define LLDPV2XDOT3LOCPOWERMDISUPPORTED_TRUE     1
#define LLDPV2XDOT3LOCPOWERMDISUPPORTED_FALSE    2

#define LLDPV2XDOT3LOCPOWERMDIENABLED_TRUE       1
#define LLDPV2XDOT3LOCPOWERMDIENABLED_FALSE      2

#define LLDPV2XDOT3LOCPOWERPAIRCONTROLABLE_TRUE  1
#define LLDPV2XDOT3LOCPOWERPAIRCONTROLABLE_FALSE 2

#define LLDPV2XDOT3REMPORTAUTONEGSUPPORTED_TRUE  1
#define LLDPV2XDOT3REMPORTAUTONEGSUPPORTED_FALSE 2

#define LLDPV2XDOT3REMPORTAUTONEGENABLED_TRUE    1
#define LLDPV2XDOT3REMPORTAUTONEGENABLED_FALSE   2

#define LLDPV2XDOT3REMPOWERPORTCLASS_PCLASSPSE   1
#define LLDPV2XDOT3REMPOWERPORTCLASS_PCLASSPD    2

#define LLDPV2XDOT3REMPOWERMDISUPPORTED_TRUE     1
#define LLDPV2XDOT3REMPOWERMDISUPPORTED_FALSE    2

#define LLDPV2XDOT3REMPOWERMDIENABLED_TRUE       1
#define LLDPV2XDOT3REMPOWERMDIENABLED_FALSE      2

#define LLDPV2XDOT3REMPOWERPAIRCONTROLABLE_TRUE  1
#define LLDPV2XDOT3REMPOWERPAIRCONTROLABLE_FALSE 2

/* notifications */

/* scalars accessible only for notify */

/* object id definitions */
extern oid lldpV2Xdot3TxRxCompliance_oid[14];
extern oid lldpV2Xdot3TxCompliance_oid[14];
extern oid lldpV2Xdot3RxCompliance_oid[14];
extern oid lldpV2Xdot3ConfigGroup_oid[14];
extern oid lldpV2Xdot3LocSysGroup_oid[14];
extern oid lldpV2Xdot3RemSysGroup_oid[14];

/* function prototypes */
/* trap function prototypes */

/* variable function prototypes */
void init_lldpV2Xdot3MIB(void);
void deinit_lldpV2Xdot3MIB(void);
int term_lldpV2Xdot3MIB(int majorID, int minorID, void *serverarg, void *clientarg);
FindVarMethod var_lldpV2Xdot3MIB;
struct lldpV2Xdot3MIB_data *lldpV2Xdot3MIB_create(void);
struct lldpV2Xdot3MIB_data *lldpV2Xdot3MIB_duplicate(struct lldpV2Xdot3MIB_data *);
int lldpV2Xdot3MIB_destroy(struct lldpV2Xdot3MIB_data **);
int lldpV2Xdot3MIB_add(struct lldpV2Xdot3MIB_data *);
void parse_lldpV2Xdot3MIB(const char *, char *);
SNMPCallback store_lldpV2Xdot3MIB;
void refresh_lldpV2Xdot3MIB(int);
FindVarMethod var_lldpV2Xdot3PortConfigTable;
struct lldpV2Xdot3PortConfigTable_data *lldpV2Xdot3PortConfigTable_create(void);
struct lldpV2Xdot3PortConfigTable_data *lldpV2Xdot3PortConfigTable_duplicate(struct lldpV2Xdot3PortConfigTable_data *);
int lldpV2Xdot3PortConfigTable_destroy(struct lldpV2Xdot3PortConfigTable_data **);
int lldpV2Xdot3PortConfigTable_add(struct lldpV2Xdot3PortConfigTable_data *);
int lldpV2Xdot3PortConfigTable_del(struct lldpV2Xdot3PortConfigTable_data *);
void parse_lldpV2Xdot3PortConfigTable(const char *, char *);
SNMPCallback store_lldpV2Xdot3PortConfigTable;
void refresh_lldpV2Xdot3PortConfigTable(int);
FindVarMethod var_lldpV2Xdot3LocPortTable;
struct lldpV2Xdot3LocPortTable_data *lldpV2Xdot3LocPortTable_create(void);
struct lldpV2Xdot3LocPortTable_data *lldpV2Xdot3LocPortTable_duplicate(struct lldpV2Xdot3LocPortTable_data *);
int lldpV2Xdot3LocPortTable_destroy(struct lldpV2Xdot3LocPortTable_data **);
int lldpV2Xdot3LocPortTable_add(struct lldpV2Xdot3LocPortTable_data *);
int lldpV2Xdot3LocPortTable_del(struct lldpV2Xdot3LocPortTable_data *);
void parse_lldpV2Xdot3LocPortTable(const char *, char *);
SNMPCallback store_lldpV2Xdot3LocPortTable;
void refresh_lldpV2Xdot3LocPortTable(int);
FindVarMethod var_lldpV2Xdot3LocPowerTable;
struct lldpV2Xdot3LocPowerTable_data *lldpV2Xdot3LocPowerTable_create(void);
struct lldpV2Xdot3LocPowerTable_data *lldpV2Xdot3LocPowerTable_duplicate(struct lldpV2Xdot3LocPowerTable_data *);
int lldpV2Xdot3LocPowerTable_destroy(struct lldpV2Xdot3LocPowerTable_data **);
int lldpV2Xdot3LocPowerTable_add(struct lldpV2Xdot3LocPowerTable_data *);
int lldpV2Xdot3LocPowerTable_del(struct lldpV2Xdot3LocPowerTable_data *);
void parse_lldpV2Xdot3LocPowerTable(const char *, char *);
SNMPCallback store_lldpV2Xdot3LocPowerTable;
void refresh_lldpV2Xdot3LocPowerTable(int);
FindVarMethod var_lldpV2Xdot3LocMaxFrameSizeTable;
struct lldpV2Xdot3LocMaxFrameSizeTable_data *lldpV2Xdot3LocMaxFrameSizeTable_create(void);
struct lldpV2Xdot3LocMaxFrameSizeTable_data *lldpV2Xdot3LocMaxFrameSizeTable_duplicate(struct lldpV2Xdot3LocMaxFrameSizeTable_data *);
int lldpV2Xdot3LocMaxFrameSizeTable_destroy(struct lldpV2Xdot3LocMaxFrameSizeTable_data **);
int lldpV2Xdot3LocMaxFrameSizeTable_add(struct lldpV2Xdot3LocMaxFrameSizeTable_data *);
int lldpV2Xdot3LocMaxFrameSizeTable_del(struct lldpV2Xdot3LocMaxFrameSizeTable_data *);
void parse_lldpV2Xdot3LocMaxFrameSizeTable(const char *, char *);
SNMPCallback store_lldpV2Xdot3LocMaxFrameSizeTable;
void refresh_lldpV2Xdot3LocMaxFrameSizeTable(int);
FindVarMethod var_lldpV2Xdot3RemPortTable;
struct lldpV2Xdot3RemPortTable_data *lldpV2Xdot3RemPortTable_create(void);
struct lldpV2Xdot3RemPortTable_data *lldpV2Xdot3RemPortTable_duplicate(struct lldpV2Xdot3RemPortTable_data *);
int lldpV2Xdot3RemPortTable_destroy(struct lldpV2Xdot3RemPortTable_data **);
int lldpV2Xdot3RemPortTable_add(struct lldpV2Xdot3RemPortTable_data *);
int lldpV2Xdot3RemPortTable_del(struct lldpV2Xdot3RemPortTable_data *);
void parse_lldpV2Xdot3RemPortTable(const char *, char *);
SNMPCallback store_lldpV2Xdot3RemPortTable;
void refresh_lldpV2Xdot3RemPortTable(int);
FindVarMethod var_lldpV2Xdot3RemPowerTable;
struct lldpV2Xdot3RemPowerTable_data *lldpV2Xdot3RemPowerTable_create(void);
struct lldpV2Xdot3RemPowerTable_data *lldpV2Xdot3RemPowerTable_duplicate(struct lldpV2Xdot3RemPowerTable_data *);
int lldpV2Xdot3RemPowerTable_destroy(struct lldpV2Xdot3RemPowerTable_data **);
int lldpV2Xdot3RemPowerTable_add(struct lldpV2Xdot3RemPowerTable_data *);
int lldpV2Xdot3RemPowerTable_del(struct lldpV2Xdot3RemPowerTable_data *);
void parse_lldpV2Xdot3RemPowerTable(const char *, char *);
SNMPCallback store_lldpV2Xdot3RemPowerTable;
void refresh_lldpV2Xdot3RemPowerTable(int);
FindVarMethod var_lldpV2Xdot3RemMaxFrameSizeTable;
struct lldpV2Xdot3RemMaxFrameSizeTable_data *lldpV2Xdot3RemMaxFrameSizeTable_create(void);
struct lldpV2Xdot3RemMaxFrameSizeTable_data *lldpV2Xdot3RemMaxFrameSizeTable_duplicate(struct lldpV2Xdot3RemMaxFrameSizeTable_data *);
int lldpV2Xdot3RemMaxFrameSizeTable_destroy(struct lldpV2Xdot3RemMaxFrameSizeTable_data **);
int lldpV2Xdot3RemMaxFrameSizeTable_add(struct lldpV2Xdot3RemMaxFrameSizeTable_data *);
int lldpV2Xdot3RemMaxFrameSizeTable_del(struct lldpV2Xdot3RemMaxFrameSizeTable_data *);
void parse_lldpV2Xdot3RemMaxFrameSizeTable(const char *, char *);
SNMPCallback store_lldpV2Xdot3RemMaxFrameSizeTable;
void refresh_lldpV2Xdot3RemMaxFrameSizeTable(int);

WriteMethod write_lldpV2Xdot3PortConfigTLVsTxEnable;
#endif				/* __LOCAL_LLDPV2XDOT3MIB_H__ */
