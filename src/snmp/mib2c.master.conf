# =============================================================================
#
# @(#) src/snmp/mib2c.master.conf
#
# -----------------------------------------------------------------------------
#
# Copyright (c) 2008-2015  Monavacon Limited <http://www.monavacon.com/>
# Copyright (c) 2001-2008  OpenSS7 Corporation <http://www.openss7.com/>
# Copyright (c) 1997-2001  Brian F. G. Bidulock <bidulock@openss7.org>
#
# All Rights Reserved.
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU Affero General Public License as published by the Free
# Software Foundation; version 3 of the License.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
# details.
#
# You should have received a copy of the GNU Affero General Public License along
# with this program.  If not, see <http://www.gnu.org/licenses/>, or write to
# the Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
# -----------------------------------------------------------------------------
#
# U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software on
# behalf of the U.S. Government ("Government"), the following provisions apply
# to you.  If the Software is supplied by the Department of Defense ("DoD"), it
# is classified as "Commercial Computer Software" under paragraph 252.227-7014
# of the DoD Supplement to the Federal Acquisition Regulations ("DFARS") (or any
# successor regulations) and the Government is acquiring only the license rights
# granted herein (the license rights customarily provided to non-Government
# users).  If the Software is supplied to any unit or agency of the Government
# other than DoD, it is classified as "Restricted Computer Software" and the
# Government's rights in the Software are defined in paragraph 52.227-19 of the
# Federal Acquisition Regulations ("FAR") (or any successor regulations) or, in
# the cases of NASA, in paragraph 18.52.227-86 of the NASA Supplement to the FAR
# (or any successor regulations).
#
# -----------------------------------------------------------------------------
#
# Commercial licensing and support of this software is available from OpenSS7
# Corporation at a fee.  See http://www.openss7.com/
#
# =============================================================================

############################################################################
# The .h file
############################################################################
type:	code-dot-h
code:	/*****************************************************************************
code:	
code:	 \@(#) src/snmp/${outputName}.h
code:	
code:	 -----------------------------------------------------------------------------
code:	
code:	 Copyright (c) 2008-2015  Monavacon Limited <http://www.monavacon.com/>
code:	 Copyright (c) 2001-2008  OpenSS7 Corporation <http://www.openss7.com/>
code:	 Copyright (c) 1997-2001  Brian F. G. Bidulock <bidulock\@openss7.org>
code:	
code:	 All Rights Reserved.
code:	
code:	 This program is free software; you can redistribute it and/or modify it under
code:	 the terms of the GNU Affero General Public License as published by the Free
code:	 Software Foundation; version 3 of the License.
code:	
code:	 This program is distributed in the hope that it will be useful, but WITHOUT
code:	 ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
code:	 FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
code:	 details.
code:	
code:	 You should have received a copy of the GNU Affero General Public License
code:	 along with this program.  If not, see <http://www.gnu.org/licenses/>, or
code:	 write to the Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA
code:	 02139, USA.
code:	
code:	 -----------------------------------------------------------------------------
code:	
code:	 U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software on
code:	 behalf of the U.S. Government (\"Government\"), the following provisions apply
code:	 to you.  If the Software is supplied by the Department of Defense (\"DoD\"), it
code:	 is classified as \"Commercial Computer Software\" under paragraph 252.227-7014
code:	 of the DoD Supplement to the Federal Acquisition Regulations (\"DFARS\") (or any
code:	 successor regulations) and the Government is acquiring only the license rights
code:	 granted herein (the license rights customarily provided to non-Government
code:	 users).  If the Software is supplied to any unit or agency of the Government
code:	 other than DoD, it is classified as \"Restricted Computer Software\" and the
code:	 Government's rights in the Software are defined in paragraph 52.227-19 of the
code:	 Federal Acquisition Regulations (\"FAR\") (or any successor regulations) or, in
code:	 the cases of NASA, in paragraph 18.52.227-86 of the NASA Supplement to the FAR
code:	 (or any successor regulations).
code:	
code:	 -----------------------------------------------------------------------------
code:	
code:	 Commercial licensing and support of this software is available from OpenSS7
code:	 Corporation at a fee.  See http://www.openss7.com/
code:	
code:	 *****************************************************************************/
code:	
code:	#ifndef __LOCAL_${OUTPUTBASE}_H__
code:	#define __LOCAL_${OUTPUTBASE}_H__
code:	
code:	/*
code:	 * This file was generated by mib2c and is intended for use as a mib module
code:	 * for the ucd-snmp snmpd agent.
code:	 */
code:	
code:	extern const char sa_program[];		/* program name */
code:	extern int sa_fclose;			/* default close files between requests */
code:	extern int sa_changed;			/* indication to reread MIB configuration */
code:	extern int sa_stats_refresh;		/* indications that statistics, the mib or its tables need to be refreshed */
code:	extern int sa_request;			/* request number for per-request actions */
code:	extern int sa_dump;			/* default packet dump */
code:	extern int sa_debug;			/* default no debug */
code:	
code:	#endif /* __LOCAL_${OUTPUTBASE}_H__ */

type:	code-main-part
code:	/*****************************************************************************
code:	
code:	 \@(#) src/snmp/${outputbase}.c
code:	
code:	 -----------------------------------------------------------------------------
code:	
code:	 Copyright (c) 2008-2015  Monavacon Limited <http://www.monavacon.com/>
code:	 Copyright (c) 2001-2008  OpenSS7 Corporation <http://www.openss7.com/>
code:	 Copyright (c) 1997-2001  Brian F. G. Bidulock <bidulock\@openss7.org>
code:	
code:	 All Rights Reserved.
code:	
code:	 This program is free software: you can redistribute it and/or modify it under
code:	 the terms of the GNU Affero General Public License as published by the Free
code:	 Software Foundation, version 3 of the license.
code:	
code:	 This program is distributed in the hope that it will be useful, but WITHOUT
code:	 ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
code:	 FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
code:	 details.
code:	
code:	 You should have received a copy of the GNU Affero General Public License
code:	 along with this program.  If not, see <http://www.gnu.org/licenses/>, or
code:	 write to the Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA
code:	 02139, USA.
code:	
code:	 -----------------------------------------------------------------------------
code:	
code:	 U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software on
code:	 behalf of the U.S. Government (\"Government\"), the following provisions apply
code:	 to you.  If the Software is supplied by the Department of Defense (\"DoD\"), it
code:	 is classified as \"Commercial Computer Software\" under paragraph 252.227-7014
code:	 of the DoD Supplement to the Federal Acquisition Regulations (\"DFARS\") (or any
code:	 successor regulations) and the Government is acquiring only the license rights
code:	 granted herein (the license rights customarily provided to non-Government
code:	 users).  If the Software is supplied to any unit or agency of the Government
code:	 other than DoD, it is classified as \"Restricted Computer Software\" and the
code:	 Government's rights in the Software are defined in paragraph 52.227-19 of the
code:	 Federal Acquisition Regulations (\"FAR\") (or any successor regulations) or, in
code:	 the cases of NASA, in paragraph 18.52.227-86 of the NASA Supplement to the FAR
code:	 (or any successor regulations).
code:	
code:	 -----------------------------------------------------------------------------
code:	
code:	 Commercial licensing and support of this software is available from OpenSS7
code:	 Corporation at a fee.  See http://www.openss7.com/
code:	
code:	 *****************************************************************************/
code:	
code:	static char const ident[] = \"src/snmp/${outputbase}.c (\" PACKAGE_ENVR \") \" PACKAGE_DATE;
code:	
code:	/* This file was generated by mib2c and is intended for use as
code:	   a mib module for the ucd-snmp snmpd agent. */
code:	#include <ucd-snmp/ucd-snmp-config.h>
code:	#include <ucd-snmp/ucd-snmp-includes.h>
code:	#include <ucd-snmp/ucd-snmp-agent-includes.h>
code:	#include <ucd-snmp/agent_trap.h>
code:	#include <ucd-snmp/callback.h>
code:	#include <ucd-snmp/snmp-tc.h>
code:	#include <ucd-snmp/default_store.h>
code:	#include <ucd-snmp/snmp_alarm.h>
code:	/* The following header files are mangled in most recent net-snmp releases so
code:	 * the versions from UCD-SNMP 4.2.5 are included here.  */
code:	#if defined HAVE_LIBNETSNMP
code:	#else  /* defined HAVE_LIBNETSNMP */
code:	#endif /* defined HAVE_LIBNETSNMP */
code:	/* These are messed up on both. */
code:	#include \"ds_agent.h\"
code:	#ifdef HAVE_UCD_SNMP_UTIL_FUNCS_H
code:	#include <ucd-snmp/util_funcs.h>
code:	/* Many recent net-snmp UCD compatible headers do not declare header_generic. */
code:	int header_generic(struct variable *, oid *, size_t *, int, size_t *, WriteMethod **);
code:	#else  /* HAVE_UCD_SNMP_UTIL_FUNCS_H */
code:	#include \"util_funcs.h\"
code:	#endif /* HAVE_UCD_SNMP_UTIL_FUNCS_H */
code:	#ifdef HAVE_UCD_SNMP_HEADER_COMPLEX_H
code:	#include <ucd-snmp/header_complex.h>
code:	#else  /* HAVE_UCD_SNMP_HEADER_COMPLEX_H */
code:	#include \"header_complex.h\"
code:	#endif /* HAVE_UCD_SNMP_HEADER_COMPLEX_H */
code:	/* This one is the other way around: it is just fine for net-snmp, but
code:	 * ucd-snmp does not provide the header file at all.  */
code:	#ifdef HAVE_UCD_SNMP_MIB_MODULES_H
code:	#include <ucd-snmp/mib_modules.h>
code:	#else  /* HAVE_UCD_SNMP_MIB_MODULES_H */
code:	#ifdef HAVE_NET_SNMP_AGENT_MIB_MODULES_H
code:	#include <net-snmp/agent/mib_modules.h>
code:	#else  /* HAVE_NET_SNMP_AGENT_MIB_MODULES_H */
code:	#include \"mib_modules.h\"
code:	#endif /* HAVE_NET_SNMP_AGENT_MIB_MODULES_H */
code:	#endif /* HAVE_UCD_SNMP_MIB_MODULES_H */
code:	#include <stdint.h>
code:	#include <signal.h>
code:	#include <sys/stat.h>		/* for struct stat, fstat() */
code:	#include <sys/types.h>
code:	#include <unistd.h>
code:	#include <stdlib.h>
code:	#include <pwd.h>		/* for getpwuid() getpwnam() */
code:	#include <grp.h>		/* for getgrgid() getgrnam() */
code:	#include <libgen.h>		/* for basename() */
code:	#include <fcntl.h>		/* for O_CREAT */
code:	#include <sys/sysctl.h>		/* for sysctl */
code:	#include <errno.h>
code:	#include <string.h>
code:	#ifdef _GNU_SOURCE
code:	#include <getopt.h>
code:	#endif
code:	#include \"$mibName.h\"
code:	#include \"$outputbase.h\"
code:	#define MY_FACILITY(__pri)	(LOG_DAEMON|(__pri))
code:	const char sa_program[] = \"$outputbase\";
code:	int sa_fclose = 1;			/* default close files between requests */
code:	int sa_changed = 1;			/* indication to reread MIB configuration */
code:	int sa_stats_refresh = 1;		/* indications that statistics, the mib or its tables need to be refreshed */
code:	int sa_request = 1;			/* request number for per-request actions */
code:	int sa_dump = 0;			/* default packet dump */
code:	int sa_debug = 0;			/* default no debug */
code:	
code:	int sa_nomead = 1;			/* default daemon mode */
code:	int sa_output = 1;			/* default normal output */
code:	int sa_agentx = 1;			/* default agentx mode */
code:	int sa_alarms = 1;			/* default application alarms */
code:	int sa_logaddr = 0;			/* log addresses */
code:	int sa_logfillog = 0;			/* log to sa_logfile */
code:	int sa_logstderr = 0;			/* log to standard error */
code:	int sa_logstdout = 0;			/* log to standard output */
code:	int sa_logsyslog = 0;			/* log to system logs */
code:	int sa_logcallog = 0;			/* log to callback logs */
code:	int sa_appendlog = 0;			/* append to log file without truncating */
code:	char sa_logfile[256] = \"/var/log/$outputbase.log\";	/* log file name */
code:	char sa_pidfile[256] = \"/var/run/$outputbase.pid\";	/* pid file name */
code:	char sa_sysctlf[256] = \"/etc/$outputbase.conf\";	/* sysctl file name */
code:	int allow_severity = LOG_INFO;
code:	int deny_severity = LOG_WARNING;
code:	FILE *stdlog = NULL;			/* file stream for log file */
code:	
code:	static void
code:	sa_version(int argc, char *argv[])
code:	{
code:		if (!sa_output && !sa_debug)
code:			return;
code:		fprintf(stdout, \"\\
code:	%2\$s\\n\\
code:	Copyright (c) 2008-2015  Monavacon Limited.  All Rights Reserved.\\n\\
code:	Distributed under Affero GPL Version 3, included here by reference.\\n\\
code:	See `%1\$s --copying' for copying permissions.\\n\\
code:	\", argv[0], ident);
code:	}
code:	
code:	static void
code:	sa_usage(int argc, char *argv[])
code:	{
code:		if (!sa_output && !sa_debug)
code:			return;
code:		fprintf(stderr, \"\\
code:	Usage:\\n\\
code:	    %1\$s [general-options] [options] [arguments]\\n\\
code:	    %1\$s {-H|--help-directives}\\n\\
code:	    %1\$s {-h|--help}\\n\\
code:	    %1\$s {-V|--version}\\n\\
code:	    %1\$s {-C|--copying}\\n\\
code:	\", argv[0]);
code:	}
code:	
code:	static void
code:	sa_help(int argc, char *argv[])
code:	{
code:		if (!sa_output && !sa_debug)
code:			return;
code:		fprintf(stdout, \"\\
code:	Usage:\\n\\
code:	    %1\$s [general-options] [options] [arguments]\\n\\
code:	    %1\$s {-h|--help}\\n\\
code:	    %1\$s {-V|--version}\\n\\
code:	    %1\$s {-C|--copying}\\n\\
code:	Arguments:\\n\\
code:	    None.\\n\\
code:	Options:\\n\\
code:	    -a, --log-addresses\\n\\
code:	        log addresses of connecting management stations.\\n\\
code:	    -A, --append\\n\\
code:	        append to logfiles without truncating.\\n\\
code:	    -c, --config-file CONFIGFILE\\n\\
code:	        use configuration file CONFIGFILE.\\n\\
code:	    -C, --config-only\\n\\
code:	        only load configuration given by -c option.\\n\\
code:	    -d, --dump\\n\\
code:	        dump sent and received PDUs.\\n\\
code:	    -D, --debug [LEVEL]\\n\\
code:	        set debugging verbosity to LEVEL.\\n\\
code:	    -D, --debug-tokens [TOKEN[,TOKEN]*]\\n\\
code:	        debug specified TOKEN's.\\n\\
code:	    -f, --dont-fork\\n\\
code:	        run in the foreground.\\n\\
code:	    -g, --gid, --groupid GID\\n\\
code:	        become group GID after listening.\\n\\
code:	    -h, --help, -?, --?\\n\\
code:	        print usage information and exit.\\n\\
code:	    -H, --help-directives\\n\\
code:	        print config directives and exit.\\n\\
code:	    -I, --initialize [-]MODULE[,MODULE]*\\n\\
code:	        initialize (or not, '-') these MODULE's.\\n\\
code:	    -k, --keep-open\\n\\
code:	        keep system files open between requests.\\n\\
code:	    -l, --log-file [LOGFILE]\\n\\
code:	        log to log file name LOGFILE.  [default: /var/log/$outputbase.log]\\n\\
code:	    -L, --log-stderr\\n\\
code:	        log to controlling terminal standard error.\\n\\
code:	    -m, --mibs [+]MIB[,MIB]*\\n\\
code:	        load these (additional '+') MIBs.\\n\\
code:	    -M, --master\\n\\
code:	        run as SNMP master instead of AgentX sub-agent.\\n\\
code:	    -M, --mibdirs [+]MIBDIR[:MIBDIR]*\\n\\
code:	        search these (additional, '+') colon separated directories for MIBs.\\n\\
code:	    -n, --nodaemon\\n\\
code:	        run in the foreground.\\n\\
code:	    -n, --name NAME\\n\\
code:	        use NAME for configuration file base.  [default: $outputbase]\\n\\
code:	    -p, --port PORTNUM\\n\\
code:	        listen on port number PORTNUM.  [default: 161]\\n\\
code:	    -p, --pidfile PIDFILE\\n\\
code:	        write daemon pid to PIDFILE.  [default: /var/run/$outputbase.pid]\\n\\
code:	    -P, --pidfile PIDFILE\\n\\
code:	        write daemon pid to PIDFILE.  [default: /var/run/$outputbase.pid]\\n\\
code:	    -q, --quiet\\n\\
code:	        suppress normal output.\\n\\
code:	    -q, --quick\\n\\
code:	        abbreviate output for machine readability.\\n\\
code:	    -r, --noroot\\n\\
code:	        do not require root privilege.\\n\\
code:	    -s, --log-syslog\\n\\
code:	        log to system logs.\\n\\
code:	    -S, --sysctl-file FILENAME\\n\\
code:	        write sysctl config file FILENAME.  [default: /etc/streams.conf]\\n\\
code:	    -t, --agent-alarms\\n\\
code:	        agent blocks {SIGALARM}.\\n\\
code:	    -T, --transport [TRANSPORT]\\n\\
code:	        default transport TRANSPORT.  [default: udp]\\n\\
code:	    -u, --uid, --userid UID\\n\\
code:	        become user UID after listening.\\n\\
code:	    -U, --dont-remove-pidfile\\n\\
code:	        do not remove PIDFILE when shutting down.\\n\\
code:	    -v, --version\\n\\
code:	        print version information and exit.\\n\\
code:	    -V, --verbose [LEVEL]\\n\\
code:	        be verbose to LEVEL.  [default: 1]\\n\\
code:	    -x, --agentx-socket [SOCKET]\\n\\
code:	        master AgentX on SOCKET.  [default: /var/agentx/master]\\n\\
code:	    -X, --agentx\\n\\
code:	        run as AgentX sub-agent instead of master (the default).\\n\\
code:	    -y, --copying\\n\\
code:	        print copying information and exit.\\n\\
code:	\", argv[0]);
code:	}
code:	
code:	static void
code:	sa_copying(int argc, char *argv[])
code:	{
code:		if (!sa_output && !sa_debug)
code:			return;
code:		fprintf(stdout, \"\\
code:	--------------------------------------------------------------------------------\\n\\
code:	%1\$s\\n\\
code:	--------------------------------------------------------------------------------\\n\\
code:	Copyright (c) 2008-2015  Monavacon Limited <http://www.monavacon.com>\\n\\
code:	Copyright (c) 2001-2008  OpenSS7 Corporation <http://www.openss7.com>\\n\\
code:	Copyright (c) 1997-2000  Brian F. G. Bidulock <bidulock\@openss7.org>\\n\\
code:	\\n\\
code:	All Rights Reserved.\\n\\
code:	--------------------------------------------------------------------------------\\n\\
code:	This program is free software; you can  redistribute  it and/or modify  it under\\n\\
code:	the terms of the GNU Affero General Public License as published by the Free\\n\\
code:	Software Foundation; Version 3 of the License.\\n\\
code:	\\n\\
code:	This program is distributed in the hope that it will  be useful, but WITHOUT ANY\\n\\
code:	WARRANTY; without even  the implied warranty of MERCHANTABILITY or FITNESS FOR A\\n\\
code:	PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details.\\n\\
code:	\\n\\
code:	You should have received a copy of the GNU  Affero  General Public License along\\n\\
code:	with this program.   If not, see <http://www.gnu.org/licenses/>, or write to the\\n\\
code:	Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.\\n\\
code:	--------------------------------------------------------------------------------\\n\\
code:	U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software on behalf\\n\\
code:	of the U.S. Government (\\\"Government\\\"), the following provisions apply to you. If\\n\\
code:	the Software is supplied by the  Department of Defense (\\\"DoD\\\"), it is classified\\n\\
code:	as \\\"Commercial  Computer  Software\\\"  under  paragraph  252.227-7014  of the  DoD\\n\\
code:	Supplement  to the  Federal Acquisition Regulations  (\\\"DFARS\\\") (or any successor\\n\\
code:	regulations) and the  Government  is acquiring  only the  license rights granted\\n\\
code:	herein (the license rights customarily provided to non-Government users). If the\\n\\
code:	Software is supplied to any unit or agency of the Government  other than DoD, it\\n\\
code:	is  classified as  \\\"Restricted Computer Software\\\" and the Government's rights in\\n\\
code:	the Software  are defined  in  paragraph 52.227-19  of the  Federal  Acquisition\\n\\
code:	Regulations (\\\"FAR\\\")  (or any successor regulations) or, in the cases of NASA, in\\n\\
code:	paragraph  18.52.227-86 of  the  NASA  Supplement  to the FAR (or any  successor\\n\\
code:	regulations).\\n\\
code:	--------------------------------------------------------------------------------\\n\\
code:	Commercial  licensing  and  support of this  software is  available from OpenSS7\\n\\
code:	Corporation at a fee.  See http://www.openss7.com/\\n\\
code:	--------------------------------------------------------------------------------\\n\\
code:	\", ident);
code:	}
code:	
code:	void
code:	sa_help_directives(int argc, char *argv[])
code:	{
code:		ds_set_boolean(DS_APPLICATION_ID, DS_AGENT_NO_ROOT_ACCESS, 1);
code:		init_agent(\"$outputbase\");
code:		 // init_mib_modules();
code:		init_mib();
code:		init_snmp(\"$outputbase\");
code:		snmp_log(MY_FACILITY(LOG_INFO), \"Configuration directives understood:\\n\");
code:		 /* Unfortunately, read_config_print_usage() uses snmp_log(), meaning that it can only be written to standard error and not standard output. */
code:		read_config_print_usage(\"    \");
code:	}
code:	
code:	static int
code:	sa_sig_register(int signum, RETSIGTYPE(*handler) (int))
code:	{
code:		sigset_t mask;
code:		struct sigaction act;
code:	
code:		act.sa_handler = handler ? handler : SIG_DFL;
code:		act.sa_flags = handler ? SA_RESTART : 0;
code:		sigemptyset(&act.sa_mask);
code:		if (sigaction(signum, &act, NULL))
code:			return (-1);
code:		sigemptyset(&mask);
code:		sigaddset(&mask, signum);
code:		sigprocmask(handler ? SIG_UNBLOCK : SIG_BLOCK, &mask, NULL);
code:		return (0);
code:	}
code:	
code:	static int sa_alm_signal = 0;
code:	static int sa_pol_signal = 0;
code:	static int sa_hup_signal = 0;
code:	static int sa_int_signal = 0;
code:	static int sa_trm_signal = 0;
code:	static int sa_alm_handle = 0;
code:	
code:	void
code:	sa_alm_callback(uint req, void *arg)
code:	{
code:		if (req == sa_alm_handle)
code:			sa_alm_handle = 0;
code:		sa_alm_signal = 1;
code:		return;
code:	}
code:	
code:	static RETSIGTYPE
code:	sa_alm_handler(int signum)
code:	{
code:		sa_alm_signal = 1;
code:		return (RETSIGTYPE) (0);
code:	}
code:	
code:	static void
code:	sa_snmp_alm_handler(uint reg, void *clientarg)
code:	{
code:		sa_alm_signal = 1;
code:		return;
code:	}
code:	
code:	static int
code:	sa_alm_catch(void)
code:	{
code:		if (sa_alarms)
code:			return sa_sig_register(SIGALRM, &sa_alm_handler);
code:		return (-1);
code:	}
code:	
code:	static int
code:	sa_alm_block(void)
code:	{
code:		if (sa_alarms)
code:			return sa_sig_register(SIGALRM, NULL);
code:		if (sa_alm_handle) {
code:			uint handle = sa_alm_handle;
code:	
code:			sa_alm_handle = 0;
code:			snmp_alarm_unregister(handle);
code:		}
code:		return (0);
code:	}
code:	
code:	static int
code:	sa_alm_action(void)
code:	{
code:		sa_alm_signal = 0;
code:		return (0);
code:	}
code:	
code:	static RETSIGTYPE
code:	sa_pol_handler(int signum)
code:	{
code:		sa_pol_signal = 1;
code:		return (RETSIGTYPE) (0);
code:	}
code:	
code:	static int
code:	sa_pol_catch(void)
code:	{
code:		return sa_sig_register(SIGPOLL, &sa_pol_handler);
code:	}
code:	
code:	static int
code:	sa_pol_block(void)
code:	{
code:		return sa_sig_register(SIGPOLL, NULL);
code:	}
code:	
code:	/*
code:	 * Both the sc(4) module and sad(4) driver issue an M_PCSIG message with
code:	 * SIGPOLL to the stream head whenever the STREAMS configuration or autopush
code:	 * configuration changes, indicating to the agent which has the sc(4) or
code:	 * sad(4) Stream open that it is necessary to reread information from the
code:	 * kernel.  This fact is merely recorded, as this information is not read each
code:	 * time that a configuration change occurs, but only after a request from some
code:	 * portion of that information occurs. This condition is also set when the
code:	 * sc(4) and sad(4) Streams are first opened. The SIGPOLL will also deliver in
code:	 * siginfo the file descriptor issuing the signal, so we could distiguish
code:	 * between sc(4) and sad(4) signals, but since one can be pushed over the
code:	 * other, there is little point in distinguishing.
code:	 *
code:	 * sc(4) or sad(4) also should be modified to provide the general streams
code:	 * statistics supported here; even though they are available through the /proc
code:	 * filesystem on Linux Fast-STREAMS.
code:	 */
code:	static int
code:	sa_pol_action(void)
code:	{
code:		sa_pol_signal = 0;
code:		snmp_log(MY_FACILITY(LOG_INFO), \"%s: Caught SIGPOLL, will re-read data structures\", sa_program);
code:		sa_changed = 1;
code:		return (0);
code:	}
code:	
code:	static RETSIGTYPE
code:	sa_hup_handler(int signum)
code:	{
code:		sa_hup_signal = 1;
code:		return (RETSIGTYPE) (0);
code:	}
code:	
code:	static int
code:	sa_hup_catch(void)
code:	{
code:		if (sa_agentx)
code:			return sa_sig_register(SIGHUP, &sa_hup_handler);
code:		return (-1);
code:	}
code:	
code:	static int
code:	sa_hup_block(void)
code:	{
code:		return sa_sig_register(SIGHUP, NULL);
code:	}
code:	
code:	static int
code:	sa_hup_action(void)
code:	{
code:		 /* There are several times that we might be sent a SIGHUP.  We might be sent a SIGHUP by logrotate asking us to close and reopen our log files. */
code:		sa_hup_signal = 0;
code:		snmp_log(MY_FACILITY(LOG_WARNING), \"Caught SIGHUP, reopening files.\");
code:		if (sa_output > 1)
code:			snmp_log(MY_FACILITY(LOG_NOTICE), \"Reopening output file %s\", sa_logfile);
code:		if (sa_logfillog != 0) {
code:			fflush(stdlog);
code:			fclose(stdlog);
code:			snmp_disable_filelog();
code:			if ((stdlog = freopen(sa_logfile, sa_appendlog ? \"a\" : \"w\", stdlog)) == NULL) {
code:				 /* I hope we have another log sink. */
code:				snmp_log(MY_FACILITY(LOG_ERR), \"%s\", strerror(errno));
code:				snmp_log(MY_FACILITY(LOG_ERR), \"Could not reopen log file %s\", sa_logfile);
code:			}
code:			snmp_enable_filelog(sa_logfile, sa_appendlog);
code:		}
code:		snmp_log(MY_FACILITY(LOG_INFO), \"Reconfiguring daemon\\n\");
code:		update_config();
code:		return (0);
code:	}
code:	
code:	static RETSIGTYPE
code:	sa_int_handler(int signum)
code:	{
code:		sa_int_signal = 1;
code:		return (RETSIGTYPE) (0);
code:	}
code:	
code:	static int
code:	sa_int_catch(void)
code:	{
code:		return sa_sig_register(SIGINT, &sa_int_handler);
code:	}
code:	
code:	static int
code:	sa_int_block(void)
code:	{
code:		return sa_sig_register(SIGINT, NULL);
code:	}
code:	
code:	static void sa_exit(int retval);
code:	
code:	static int
code:	sa_int_action(void)
code:	{
code:		sa_int_signal = 0;
code:		snmp_log(MY_FACILITY(LOG_WARNING), \"%s: Caught SIGINT, shutting down\", sa_program);
code:		if (sa_debug)
code:			snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: shutting down\\n\", sa_program);
code:		snmp_shutdown(\"$outputbase\");
code:		sa_exit(0);
code:		return (0);		/* should be no return */
code:	}
code:	
code:	static RETSIGTYPE
code:	sa_trm_handler(int signum)
code:	{
code:		sa_trm_signal = 1;
code:		return (RETSIGTYPE) (0);
code:	}
code:	
code:	static int
code:	sa_trm_catch(void)
code:	{
code:		return sa_sig_register(SIGTERM, &sa_trm_handler);
code:	}
code:	
code:	static int
code:	sa_trm_block(void)
code:	{
code:		return sa_sig_register(SIGTERM, NULL);
code:	}
code:	
code:	static void sa_exit(int retval);
code:	
code:	static int
code:	sa_trm_action(void)
code:	{
code:		sa_trm_signal = 0;
code:		snmp_log(MY_FACILITY(LOG_WARNING), \"%s: Caught SIGTERM, shutting down\", sa_program);
code:		if (sa_debug)
code:			snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: shutting down\\n\", sa_program);
code:		snmp_shutdown(\"$outputbase\");
code:		sa_exit(0);
code:		return (0);		/* should be no return */
code:	}
code:	
code:	static void
code:	sa_sig_catch(void)
code:	{
code:		sa_alm_catch();
code:		sa_pol_catch();
code:		sa_hup_catch();
code:		sa_int_catch();
code:		sa_trm_catch();
code:	}
code:	
code:	static void
code:	sa_sig_block(void)
code:	{
code:		sa_alm_block();
code:		sa_pol_block();
code:		sa_hup_block();
code:		sa_int_block();
code:		sa_trm_block();
code:	}
code:	
code:	int
code:	sa_start_timer(long duration)
code:	{
code:		if (sa_alarms) {
code:			struct itimerval setting = {
code:				{0, 0},
code:				{duration / 1000, (duration % 1000) * 1000}
code:			};
code:			if (sa_alm_catch())
code:				return (-1);
code:			if (setitimer(ITIMER_REAL, &setting, NULL))
code:				return (-1);
code:			sa_alm_signal = 0;
code:			return (0);
code:		} else {
code:	#if defined NETSNMP_DS_APPLICATION_ID
code:			struct timeval setting = {
code:				duration / 1000, (duration % 1000) * 1000
code:			};
code:			sa_alm_handle = snmp_alarm_register_hr(setting, 0, sa_snmp_alm_handler, NULL);
code:	#else
code:			sa_alm_handle = snmp_alarm_register((duration + 999) / 1000, 0, sa_snmp_alm_handler, NULL);
code:	#endif
code:			return (sa_alm_handle ? 0 : -1);
code:		}
code:	}
code:	
code:	static void
code:	sa_exit(int retval)
code:	{
code:		if (retval)
code:			snmp_log(MY_FACILITY(LOG_ERR), \"%s: Exiting %d\", sa_program, retval);
code:		else
code:			snmp_log(MY_FACILITY(LOG_NOTICE), \"%s: Exiting %d\", sa_program, retval);
code:		fflush(stdout);
code:		fflush(stderr);
code:		sa_sig_block();
code:		closelog();
code:		exit(retval);
code:	}
code:	
code:	static void
code:	sa_init_logging(int argc, char *argv[])
code:	{
code:		static char progname[256];
code:	
code:		 /* The purpose of this function is to bring logging up before forking (and while still in the foreground) so that we can use the snmp_log() function before and during forking if necessary.
code:		   Note that the default configuration for snmp_log() is to send all logs to standard error. */
code:		strncpy(progname, basename(argv[0]), sizeof(progname));
code:		snmp_disable_log();
code:		if (sa_logfillog) {
code:			snmp_enable_filelog(sa_logfile, sa_appendlog);
code:		}
code:		if (sa_logstderr || sa_logstdout) {
code:	#if defined LOG_PERROR
code:			 /* Note that when we have Linux LOG_PERROR, and logs go both to syslog and stderr, it is better to use the LOG_PERROR than to use snmp_log()'s print to stderr, as the former is better 
code:			   formated. */
code:			if (!sa_logsyslog)
code:				snmp_enable_stderrlog();
code:	#else				/* defined LOG_PERROR */
code:			snmp_enable_stderrlog();
code:	#endif				/* defined LOG_PERROR */
code:		}
code:		if (sa_logsyslog) {
code:	#if !defined HAVE_SNMP_ENABLE_SYSLOG_IDENT
code:			snmp_enable_syslog();
code:	#else				/* !defined HAVE_SNMP_ENABLE_SYSLOG_IDENT */
code:			snmp_enable_syslog_ident(\"$outputbase\", LOG_DAEMON);
code:	#endif				/* !defined HAVE_SNMP_ENABLE_SYSLOG_IDENT */
code:			 /* Note that the way that snmp sets up the logger is not really the way we want it, so close the log and reopen it the way we want. */
code:			closelog();
code:	#if defined LOG_PERROR
code:			openlog(\"$outputbase\", LOG_PID | LOG_CONS | LOG_NDELAY | (sa_logstderr ? LOG_PERROR : 0), MY_FACILITY(0));
code:	#else				/* defined LOG_PERROR */
code:			openlog(\"$outputbase\", LOG_PID | LOG_CONS | LOG_NDELAY, MY_FACILITY(0));
code:	#endif				/* defined LOG_PERROR */
code:		}
code:		if (sa_logcallog) {
code:			snmp_enable_calllog();
code:		}
code:	}
code:	
code:	static void
code:	sa_enter(int argc, char *argv[])
code:	{
code:		if (sa_nomead) {
code:			pid_t pid;
code:	
code:			if ((pid = fork()) < 0) {
code:				perror(argv[0]);
code:				exit(2);
code:			} else if (pid != 0) {
code:				 /* parent exits */
code:				exit(0);
code:			}
code:			setsid();	/* become a session leader */
code:			 /* fork once more for SVR4 */
code:			if ((pid = fork()) < 0) {
code:				perror(argv[0]);
code:				exit(2);
code:			} else if (pid != 0) {
code:				 /* parent responsible for writing pid file */
code:				if (sa_nomead || sa_pidfile[0] != '\\0') {
code:					FILE *pidf;
code:	
code:					 /* initialize default filename */
code:					if (sa_pidfile[0] == '\\0')
code:						snprintf(sa_pidfile, sizeof(sa_pidfile), \"/var/run/%s.pid\", sa_program);
code:					if (sa_output > 1) {
code:						snmp_log(MY_FACILITY(LOG_NOTICE), \"%s: Writing daemon pid to file %s\", sa_program, sa_pidfile);
code:					}
code:					if ((pidf = fopen(sa_pidfile, \"w+\"))) {
code:						fprintf(pidf, \"%d\", (int) pid);
code:						fflush(pidf);
code:						fclose(pidf);
code:					} else {
code:						snmp_log(MY_FACILITY(LOG_ERR), \"%s: %m\", sa_program);
code:						snmp_log(MY_FACILITY(LOG_ERR), \"%s: Could not write pid to file %s\", sa_program, sa_pidfile);
code:						sa_exit(2);
code:						 /* no return */
code:					}
code:				}
code:				 /* parent exits */
code:				exit(0);
code:			}
code:			 /* child continues */
code:			 /* release current directory */
code:			if (chdir(\"/\") < 0) {
code:				perror(argv[0]);
code:				exit(2);
code:			}
code:			umask(0);	/* clear file creation mask */
code:			 /* rearrange file streams */
code:			fclose(stdin);
code:		}
code:		 /* continue as foreground or background */
code:		sa_init_logging(argc, argv);
code:		sa_sig_catch();
code:		if (sa_agentx) {
code:			if (sa_debug)
code:				snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: running as AgentX client\\n\", argv[0]);
code:			 /* run as an AgentX client */
code:			ds_set_boolean(DS_APPLICATION_ID, DS_AGENT_ROLE, 1);
code:		} else {
code:			if (sa_debug)
code:				snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: running as SNMP master agent\\n\", argv[0]);
code:			 /* run as SNMP master */
code:			ds_set_boolean(DS_APPLICATION_ID, DS_AGENT_ROLE, 0);
code:		}
code:		if (sa_alarms) {
code:			if (sa_debug)
code:				snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: using application alarms\\n\", argv[0]);
code:			 /* use application alarms */
code:			ds_set_boolean(DS_LIBRARY_ID, DS_LIB_ALARM_DONT_USE_SIG, 1);
code:		}
code:		 /* initialize agent */
code:		init_agent(\"$outputbase\");
code:		 /* initialize MIB */
code:		init_$mibName();
code:		 /* initialize SNMP */
code:		init_snmp(\"$outputbase\");
code:		if (!sa_agentx) {
code:			if (sa_debug)
code:				snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: running as SNMP master\\n\", argv[0]);
code:	#if !defined NETSNMP_DS_APPLICATION_ID
code:			init_master_agent(710, NULL, NULL);
code:	#else
code:			init_master_agent();
code:	#endif
code:		}
code:		snmp_log(MY_FACILITY(LOG_NOTICE), \"%s: Startup complete.\", sa_program);
code:	}
code:	
code:	static int
code:	sa_check_and_process(void)
code:	{
code:		int numfds;
code:		fd_set readfds, writefds, exceptfds;
code:		struct timeval timeout, *tvp;
code:		int count, block, i;
code:	
code:		 /* check signals */
code:		if (sa_alm_signal)
code:			sa_alm_action();
code:		if (sa_pol_signal)
code:			sa_pol_action();
code:		if (sa_hup_signal)
code:			sa_hup_action();
code:		if (sa_int_signal)
code:			sa_int_action();	/* no return */
code:		if (sa_trm_signal)
code:			sa_trm_action();	/* no return */
code:	
code:		for (i = 0; i < NUM_EXTERNAL_SIGS; i++) {
code:			if (external_signal_scheduled[i]) {
code:				external_signal_scheduled[i]--;
code:				external_signal_handler[i] (i);
code:			}
code:		}
code:	
code:		numfds = 0;
code:		FD_ZERO(&readfds);
code:		FD_ZERO(&writefds);
code:		FD_ZERO(&exceptfds);
code:		timeout.tv_sec = 0;
code:		timeout.tv_usec = 500000UL;
code:		block = 0;
code:		snmp_select_info(&numfds, &readfds, &timeout, &block);
code:		tvp = (block == 1) ? NULL : &timeout;
code:	
code:		for (i = 0; i < external_readfdlen; i++) {
code:			FD_SET(external_readfd[i], &readfds);
code:			if (external_readfd[i] >= numfds)
code:				numfds = external_readfd[i] + 1;
code:		}
code:		for (i = 0; i < external_writefdlen; i++) {
code:			FD_SET(external_writefd[i], &writefds);
code:			if (external_writefd[i] >= numfds)
code:				numfds = external_writefd[i] + 1;
code:		}
code:		for (i = 0; i < external_exceptfdlen; i++) {
code:			FD_SET(external_exceptfd[i], &exceptfds);
code:			if (external_exceptfd[i] >= numfds)
code:				numfds = external_exceptfd[i] + 1;
code:		}
code:	
code:		count = select(numfds, &readfds, &writefds, &exceptfds, tvp);
code:	
code:		if (count > 0) {
code:	
code:			snmp_read(&readfds);
code:	
code:			for (i = 0; count && (i < external_readfdlen); i++) {
code:				if (FD_ISSET(external_readfd[i], &readfds)) {
code:					external_readfdfunc[i] (external_readfd[i], external_readfd_data[i]);
code:					FD_CLR(external_readfd[i], &readfds);
code:					count--;
code:				}
code:			}
code:			for (i = 0; count && (i < external_writefdlen); i++) {
code:				if (FD_ISSET(external_writefd[i], &writefds)) {
code:					external_writefdfunc[i] (external_writefd[i], external_writefd_data[i]);
code:					FD_CLR(external_writefd[i], &writefds);
code:					count--;
code:				}
code:			}
code:			for (i = 0; count && (i < external_exceptfdlen); i++) {
code:				if (FD_ISSET(external_exceptfd[i], &exceptfds)) {
code:					external_exceptfdfunc[i] (external_exceptfd[i], external_exceptfd_data[i]);
code:					FD_CLR(external_exceptfd[i], &exceptfds);
code:					count--;
code:				}
code:			}
code:	
code:		} else {
code:			switch (count) {
code:			case 0:
code:				snmp_timeout();
code:				break;
code:			case -1:
code:				if (errno != EINTR)
code:					snmp_log_perror(\"select\");
code:				return (count);
code:			default:
code:				snmp_log(LOG_ERR, \"select returned %d\\n\", count);
code:				return (count);
code:			}		/* endif -- count>0 */
code:		}
code:	
code:		run_alarms();
code:		return (count);
code:	}
code:	
code:	static void
code:	sa_mloop(int argc, char *argv[])
code:	{
code:		int retval;
code:	
code:		for (;;) {
code:	
code:			if ((retval = sa_check_and_process()) <= 0) {
code:				 /* did not process packets or read fds */
code:				switch (retval) {
code:				case 0:
code:					 /* timeout */
code:					continue;
code:				case -1:
code:					 /* error */
code:					switch (errno) {
code:					case EINTR:
code:					case EAGAIN:
code:					case ETIMEDOUT:
code:						continue;
code:					}
code:				default:
code:					 /* fatal error */
code:					break;
code:				}
code:				break;
code:			}
code:		}
code:		if (sa_debug)
code:			snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: shutting down\\n\", argv[0]);
code:		snmp_shutdown(\"$outputbase\");
code:	}
code:	
code:	int
code:	main(int argc, char *argv[])
code:	{
code:		for (;;) {
code:			int c, val, fd;
code:			char *cptr;
code:			struct passwd *pw;
code:			struct group *gr;
code:			struct stat st;
code:	
code:	#if defined _GNU_SOURCE
code:			int option_index = 0;
code:	                /* *INDENT-OFF* */
code:	                static struct option long_options[] = {
code:	                        {\"log-addresses\",	no_argument,		NULL, 'a'},
code:	                        {\"append\",		no_argument,		NULL, 'A'},
code:	                        {\"config-file\",		required_argument,	NULL, 'c'},
code:	                        {\"no-configs\",		no_argument,		NULL, 'C'},
code:	                        {\"dump\",		no_argument,		NULL, 'd'},
code:	                        {\"debug\",		optional_argument,	NULL, 'D'},
code:	                        {\"debug-tokens\",	optional_argument,	NULL, 'D'},
code:	                        {\"dont-fork\",		no_argument,		NULL, 'f'},
code:	                        {\"gid\",			required_argument,	NULL, 'g'},
code:	                        {\"groupid\",		required_argument,	NULL, 'g'},
code:	                        {\"help\",		no_argument,		NULL, 'h'},
code:	                        {\"?\",			no_argument,		NULL, 'h'},
code:	                        {\"help-directives\",	no_argument,		NULL, 'H'},
code:	                        {\"initialize\",		required_argument,	NULL, 'I'},
code:	                        {\"init-modules\",	required_argument,	NULL, 'I'},
code:	                        {\"keep-open\",		no_argument,		NULL, 'k'},
code:	                        {\"log-file\",		optional_argument,	NULL, 'l'},
code:	                        {\"logfile\",		optional_argument,	NULL, 'l'},
code:	                        {\"Lf\",			optional_argument,	NULL, 'l'},
code:	                        {\"LF\",			required_argument,	NULL, 'l'},
code:	                        {\"log-stderr\",		no_argument,		NULL, 'L'},
code:	                        {\"Le\",			no_argument,		NULL, 'L'},
code:	                        {\"LE\",			required_argument,	NULL, 'L'},
code:	                        {\"mibs\",		required_argument,	NULL, 'm'},
code:	                        {\"master\",		no_argument,		NULL, 'M'},
code:	                        {\"mibdirs\",		required_argument,	NULL, 'M'},
code:	                        {\"nodaemon\",		no_argument,		NULL, 'n'},
code:	                        {\"name\",		required_argument,	NULL, 'n'},
code:	                        {\"dry-run\",		no_argument,		NULL, 'N'},
code:	                        {\"log-stdout\",		no_argument,		NULL, 'o'},
code:	                        {\"Lo\",			no_argument,		NULL, 'o'},
code:	                        {\"LO\",			required_argument,	NULL, 'o'},
code:	                        {\"port\",		required_argument,	NULL, 'p'},
code:	                        {\"pidfile\",		required_argument,	NULL, 'P'},
code:	                        {\"quiet\",		no_argument,		NULL, 'q'},
code:	                        {\"quick\",		no_argument,		NULL, 'q'},
code:	                        {\"noroot\",		no_argument,		NULL, 'r'},
code:	                        {\"log-syslog\",		no_argument,		NULL, 's'},
code:	                        {\"Ls\",			no_argument,		NULL, 's'},
code:	                        {\"LS\",			required_argument,	NULL, 's'},
code:	                        {\"syslog\",		no_argument,		NULL, 's'},
code:	                        {\"sysctl-file\",		required_argument,	NULL, 'S'},
code:	                        {\"agent-alarms\",	no_argument,		NULL, 't'},
code:	                        {\"transport\",		optional_argument,	NULL, 'T'},
code:	                        {\"uid\",			required_argument,	NULL, 'u'},
code:	                        {\"userid\",		required_argument,	NULL, 'u'},
code:	                        {\"dont-remove-pidfile\",	no_argument,		NULL, 'U'},
code:	                        {\"leave-pidfile\",	no_argument,		NULL, 'U'},
code:	                        {\"version\",		no_argument,		NULL, 'v'},
code:	                        {\"verbose\",		optional_argument,	NULL, 'V'},
code:	                        {\"agentx-socket\",	required_argument,	NULL, 'x'},
code:	                        {\"agentx\",		no_argument,		NULL, 'X'},
code:	                        {\"copying\",		no_argument,		NULL, 'y'},
code:	#if 0
code:	                        {\"directory\",		required_argument,	NULL, 'd'},
code:	                        {\"basename\",		required_argument,	NULL, 'b'},
code:	                        {\"outfile\",		required_argument,	NULL, 'o'},
code:	                        {\"errfile\",		required_argument,	NULL, 'e'},
code:	#endif
code:	                        { 0, }
code:	                };
code:	                /* *INDENT-ON* */
code:	
code:			c = getopt_long_only(argc, argv, \":aAc:CdD::fg:hHI:kl::L::m:M::n::o::p:P:qrs::S:tT::u:UvV::x:Xy\", long_options, &option_index);
code:	#else				/* defined _GNU_SOURCE */
code:			c = getopt(argc, argv, \":aAc:CdD::fg:hHI:kl::L::m:M::n::o::p:P:qrs::S:tT::u:UvV::x:Xy\");
code:	#endif				/* defined _GNU_SOURCE */
code:			if (c == -1) {
code:				if (sa_debug)
code:					snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: done options processing\\n\", argv[0]);
code:				break;
code:			}
code:			switch (c) {
code:			case 0:
code:				goto bad_usage;
code:			case 'a':	/* -a, --log-addresses */
code:				if (sa_debug)
code:					snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: logging addresses\\n\", argv[0]);
code:				sa_logaddr++;
code:				break;
code:			case 'A':	/* -A, --append */
code:				if (sa_debug)
code:					snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: will not truncate logfile\\n\", argv[0]);
code:	#if defined NETSNMP_DS_LIB_APPEND_LOGFILES
code:				ds_set_boolean(DS_LIBRARY_ID, NETSNMP_DS_LIB_APPEND_LOGFILES, 1);
code:	#endif				/* defined NETSNMP_DS_LIB_APPEND_LOGFILES */
code:				sa_appendlog = 1;
code:				break;
code:			case 'c':	/* -c, --config-file CONFIGFILE */
code:				if (optarg == NULL)
code:					goto bad_option;
code:				if (sa_debug)
code:					snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: using configuration file %s\\n\", argv[0], optarg);
code:				ds_set_string(DS_LIBRARY_ID, DS_LIB_OPTIONALCONFIG, optarg);
code:				break;
code:			case 'C':	/* -C, --no-configs */
code:				if (sa_debug)
code:					snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: not reading default config files\\n\", argv[0]);
code:				ds_set_boolean(DS_LIBRARY_ID, DS_LIB_DONT_READ_CONFIGS, 1);
code:				break;
code:			case 'd':	/* -d, --dump */
code:				if (sa_debug)
code:					snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: setting packet dump\\n\", argv[0]);
code:				sa_dump = 1;
code:				 // snmp_set_dump_packet(sa_dump);
code:				ds_set_boolean(DS_LIBRARY_ID, DS_LIB_DUMP_PACKET, sa_dump);
code:				ds_set_boolean(DS_APPLICATION_ID, DS_AGENT_VERBOSE, sa_dump);
code:				break;
code:			case 'D':	/* -D, --debug [LEVEL], --debug-tokens [TOKENS] */
code:				if (sa_debug)
code:					snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: increasing debug verbosity\\n\", argv[0]);
code:				if (optarg == NULL) {
code:					 /* no option: must be -D, --debug */
code:					sa_debug++;
code:					if (sa_debug)
code:						snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: debug level is now %d\\n\", argv[0], sa_debug);
code:					if (sa_debug)
code:						snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: debugging all tokens\\n\", argv[0]);
code:					if (sa_debug)
code:						debug_register_tokens(\"ALL\");
code:				} else {
code:					cptr = optarg;
code:					if ((val = strtol(optarg, &cptr, 0)) < 0)
code:						goto bad_option;
code:					if (*cptr == '\\0') {
code:						 /* it is just a number, must be -D, --debug [LEVEL] */
code:						sa_debug = val;
code:						if (sa_debug)
code:							snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: debug level is now %d\\n\", argv[0], sa_debug);
code:					} else {
code:						 /* not a number, must be -D, --debug-tokens TOKENS */
code:						if (sa_debug)
code:							snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: debugging tokens %s\\n\", argv[0], optarg);
code:						debug_register_tokens(optarg);
code:					}
code:				}
code:				break;
code:			case 'f':	/* -f, --dont-fork */
code:				if (sa_debug)
code:					snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: suppressing daemon mode\\n\", argv[0]);
code:				sa_nomead = 0;
code:				break;
code:			case 'u':	/* -u, --uid, --userid UID */
code:				cptr = optarg;
code:				if ((val = strtol(optarg, &cptr, 0)) < 0)
code:					goto bad_option;
code:				 /* UID can be name or number */
code:				if ((pw = (*cptr == '\\0') ? getpwuid((uid_t) val) : getpwnam(optarg)) == NULL)
code:					goto bad_option;
code:				if (sa_debug)
code:					snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: will run as uid %s(%d)\\n\", argv[0], pw->pw_name, pw->pw_uid);
code:				ds_set_int(DS_APPLICATION_ID, DS_AGENT_USERID, pw->pw_uid);
code:				break;
code:			case 'g':	/* -g, --gid, --groupdid GID */
code:				cptr = optarg;
code:				if ((val = strtol(optarg, &cptr, 0)) < 0)
code:					goto bad_option;
code:				 /* GID can be name or number */
code:				if ((gr = (*cptr == '\\0') ? getgrgid((gid_t) val) : getgrnam(optarg)) == NULL)
code:					goto bad_option;
code:				if (sa_debug)
code:					snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: will run as gid %s(%d)\\n\", argv[0], gr->gr_name, gr->gr_gid);
code:				ds_set_int(DS_APPLICATION_ID, DS_AGENT_GROUPID, gr->gr_gid);
code:				break;
code:			case 'h':	/* -h, --help, -?, --? */
code:				if (sa_debug)
code:					snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: printing help message\\n\", argv[0]);
code:				sa_help(argc, argv);
code:				exit(0);
code:			case 'H':	/* -H, --help-directives */
code:				if (sa_debug)
code:					snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: printing config directives\\n\", argv[0]);
code:				sa_help_directives(argc, argv);
code:				exit(0);
code:			case 'I':	/* -I, --init-modules, --initialize MODULE[{,| |:}MODULE]* */
code:				if (sa_debug)
code:					snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: will initialize modules: %s\\n\", argv[0], optarg);
code:				add_to_init_list(optarg);
code:				break;
code:			case 'k':	/* -k, --keep-open */
code:				if (sa_debug)
code:					snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: keeping files open\\n\", argv[0]);
code:				sa_fclose = 0;
code:				break;
code:			case 'l':	/* -l, --log-file, --logfile, -Lf, -LF p1[-p2] [LOGFILE] */
code:				if (optarg != NULL)
code:					strncpy(sa_logfile, optarg, sizeof(sa_logfile));
code:				if (sa_debug)
code:					snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: will log to file %s\\n\", argv[0], sa_logfile);
code:				sa_logfillog = 1;
code:				break;
code:			case 'L':	/* -L, --log-stderr, -Le, -LE p1[-p2] */
code:				 /* Note that the recent NET-SNMP version of this option is far more complicated: -Le is the same as the old version of the option; -Lf LOGFILE is like the -l option; -Ls is
code:				   like the -s option; -Lo logs messages to standard output; -LX p1[-p2] [LOGFILE], where X = E, F, S or O, logs priority p1 and above to X, or p1 thru p2 to X. */
code:				if (sa_debug)
code:					snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: logging to standard error\\n\", argv[0]);
code:				sa_logstderr = 1;
code:				break;
code:			case 'm':	/* -m, --mibs MIBS */
code:				if (sa_debug)
code:					snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: using MIBS %s\\n\", argv[0], optarg);
code:				break;
code:			case 'M':	/* -M, --master or -M, --mibdirs MIBDIRS */
code:				if (optarg) {
code:					 /* -M, --mibdirs MIBDIRS */
code:					if (sa_debug)
code:						snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: using MIBDIRS %s\\n\", argv[0], optarg);
code:				} else {
code:					 /* -M, --master */
code:					if (sa_debug)
code:						snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: setting SNMP master\\n\", argv[0]);
code:					sa_agentx = 0;
code:					ds_set_boolean(DS_APPLICATION_ID, DS_AGENT_ROLE, 0);
code:				}
code:				break;
code:			case 'n':	/* -n, --nodaemon or -n, --name NAME */
code:				if (optarg) {
code:					 /* -n, --name NAME */
code:					if (sa_debug)
code:						snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: using name %s\\n\", argv[0], optarg);
code:					ds_set_string(DS_APPLICATION_ID, DS_AGENT_PROGNAME, optarg);
code:				} else {
code:					 /* -n, --nodaemon */
code:					if (sa_debug)
code:						snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: suppressing deamon mode\\n\", argv[0]);
code:					sa_nomead = 0;
code:					ds_set_string(DS_APPLICATION_ID, DS_AGENT_PROGNAME, basename(argv[0]));
code:				}
code:				break;
code:			case 'N':	/* -N, --dry-run */
code:	#if defined NETSNMP_DS_AGENT_QUIT_IMMEDIATELY
code:				if (sa_debug)
code:					snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: setting for dry-runs startup\\n\", argv[0]);
code:				ds_set_boolean(DS_APPLICATION_ID, NETSNMP_DS_AGENT_QUIT_IMMEDIATELY, 1);
code:				break;
code:	#else				/* defined NETSNMP_DS_AGENT_QUIT_IMMEDIATELY */
code:				snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: -N option not supported\\n\", argv[0]);
code:				goto bad_option;
code:	#endif				/* defined NETSNMP_DS_AGENT_QUIT_IMMEDIATELY */
code:			case 'o':	/* -o, --log-stdout, -Lo, -LO p1[-p2] */
code:				if (sa_debug)
code:					snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: logging to stdout\\n\", argv[0]);
code:				sa_logstdout = 1;
code:				break;
code:			case 'p':	/* -p, --port PORTNUM or -p, --pidfile PIDFILE */
code:				cptr = optarg;
code:				if ((val = strtol(optarg, &cptr, 0)) < 0 || val > 16383)
code:					goto bad_option;
code:				if (*cptr == '\\0') {
code:					char buf[4096];
code:	
code:					 /* -p, --port PORTNUM */
code:					if ((cptr = ds_get_string(DS_APPLICATION_ID, DS_AGENT_PORTS)))
code:						snprintf(buf, sizeof(buf), \"%s,%s\", cptr, optarg);
code:					else
code:						strncpy(buf, optarg, sizeof(buf));
code:					ds_set_string(DS_APPLICATION_ID, DS_AGENT_PORTS, buf);
code:					break;
code:				}
code:				 /* fall through */
code:			case 'P':	/* -p, -P, --pidfile PIDFILE */
code:				if (optarg) {
code:					 /* either it exists */
code:					if (stat(optarg, &st) == -1) {
code:						 /* or we can create it */
code:						if ((fd = open(optarg, O_CREAT, 0600)) == -1) {
code:							perror(argv[0]);
code:							goto bad_option;
code:						}
code:						close(fd);
code:					}
code:					if (sa_debug)
code:						snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: setting pid file to %s\\n\", argv[0], optarg);
code:					strncpy(sa_pidfile, optarg, sizeof(sa_pidfile));
code:				}
code:				if (sa_debug)
code:					snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: using pidfile %s\\n\", argv[0], sa_pidfile);
code:				break;
code:			case 'q':	/* -q, --quiet, --quick */
code:				if (sa_debug)
code:					snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: suppressing normal output\\n\", argv[0]);
code:				sa_debug = 0;
code:				sa_output = 0;
code:				ds_set_boolean(DS_APPLICATION_ID, DS_AGENT_VERBOSE, 0);
code:				 // snmp_set_quick_print();
code:				ds_set_boolean(DS_LIBRARY_ID, DS_LIB_QUICK_PRINT, 1);
code:				break;
code:			case 'r':	/* -r, --noroot */
code:				if (sa_debug)
code:					snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: setting for non-root access\\n\", argv[0]);
code:				ds_set_boolean(DS_APPLICATION_ID, DS_AGENT_NO_ROOT_ACCESS, 1);
code:				break;
code:			case 's':	/* -s, --log-syslog, -Ls, -LS p1[-p2] */
code:				if (sa_debug)
code:					snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: logging to system logs\\n\", argv[0]);
code:				sa_logsyslog = 1;
code:				break;
code:			case 'S':	/* -S, -sysctl-file FILENAME */
code:				if (sa_debug)
code:					snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: using %s for backing\\n\", argv[0], optarg);
code:				strncpy(sa_sysctlf, optarg, sizeof(sa_sysctlf));
code:				break;
code:			case 't':	/* -t, --agent-alarms */
code:				if (sa_debug)
code:					snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: setting agent alarms\\n\", argv[0]);
code:				sa_alarms = 0;
code:				ds_set_boolean(DS_LIBRARY_ID, DS_LIB_ALARM_DONT_USE_SIG, 1);
code:				break;
code:			case 'T':	/* -T, --transport [TRANSPORT] */
code:				if (optarg == NULL)
code:					goto udp_transport;
code:				if (!strcasecmp(\"TCP\", optarg)) {
code:					if (sa_debug)
code:						snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: setting default transport to TCP\\n\", argv[0]);
code:					val = ds_get_int(DS_APPLICATION_ID, DS_AGENT_FLAGS);
code:					val |= SNMP_FLAGS_STREAM_SOCKET;
code:					ds_set_int(DS_APPLICATION_ID, DS_AGENT_FLAGS, val);
code:				} else if (!strcasecmp(\"UDP\", optarg)) {
code:				      udp_transport:
code:					if (sa_debug)
code:						snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: setting default transport to UDP\\n\", argv[0]);
code:					val = ds_get_int(DS_APPLICATION_ID, DS_AGENT_FLAGS);
code:					val &= ~SNMP_FLAGS_STREAM_SOCKET;
code:					ds_set_int(DS_APPLICATION_ID, DS_AGENT_FLAGS, val);
code:				} else
code:					goto bad_option;
code:				break;
code:			case 'U':
code:	#if defined NETSNMP_DS_AGENT_LEAVE_PIDFILE
code:				if (sa_debug)
code:					snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: will leave pidfile after shutdown\\n\", argv[0]);
code:				ds_set_boolean(DS_APPLICATION_ID, NETSNMP_DS_AGENT_LEAVE_PIDFILE, 1);
code:	#else
code:				snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: -U option not supported\\n\");
code:				goto bad_option;
code:	#endif				/* defined NETSNMP_DS_AGENT_LEAVE_PIDFILE */
code:				break;
code:			case 'v':	/* -v, --version */
code:				if (sa_debug)
code:					snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: printing version message\\n\", argv[0]);
code:				sa_version(argc, argv);
code:				exit(0);
code:			case 'V':	/* -V, --verbose [LEVEL] */
code:				if (sa_debug)
code:					snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: increasing output verbosity\\n\", argv[0]);
code:				if (optarg == NULL) {
code:					sa_output++;
code:				} else {
code:					if ((val = strtol(optarg, NULL, 0)) < 0)
code:						goto bad_option;
code:					sa_output = val;
code:				}
code:				if (sa_output > 1)
code:					ds_set_boolean(DS_APPLICATION_ID, DS_AGENT_VERBOSE, 1);
code:				else
code:					ds_set_boolean(DS_APPLICATION_ID, DS_AGENT_VERBOSE, 0);
code:				break;
code:			case 'x':	/* -x, --agentx-socket SOCKET */
code:				if (sa_debug)
code:					snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: setting AgentX socket to %s\\n\", argv[0], optarg);
code:				ds_set_string(DS_APPLICATION_ID, DS_AGENT_X_SOCKET, optarg);
code:				 // ds_set_boolean(DS_APPLICATION_ID, DS_AGENT_AGENTX_MASTER, 1);
code:				break;
code:			case 'X':	/* -X, --agentx */
code:				if (sa_debug)
code:					snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: setting AgentX sub-agent\\n\", argv[0]);
code:				sa_agentx = 1;
code:				ds_set_boolean(DS_APPLICATION_ID, DS_AGENT_ROLE, 1);
code:				break;
code:			case 'y':	/* -y, --copying */
code:				if (sa_debug)
code:					snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: printing copying message\\n\", argv[0]);
code:				sa_copying(argc, argv);
code:				exit(0);
code:			case '?':
code:			case ':':
code:			default:
code:			      bad_option:
code:				optind--;
code:				goto bad_nonopt;
code:			      bad_nonopt:
code:				if (sa_output || sa_debug) {
code:					if (optind < argc) {
code:						fprintf(stderr, \"%s: syntax error near '\", argv[0]);
code:						while (optind < argc)
code:							fprintf(stderr, \"%s \", argv[optind++]);
code:						fprintf(stderr, \"'\\n\");
code:					} else {
code:						fprintf(stderr, \"%s: missing option or argument\", argv[0]);
code:						fprintf(stderr, \"\\n\");
code:					}
code:					fflush(stderr);
code:				      bad_usage:
code:					sa_usage(argc, argv);
code:				}
code:				exit(2);
code:			}
code:		}
code:		if (optind < argc) {
code:			if (sa_debug)
code:				snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: excess non-option arguments\\n\", argv[0]);
code:			goto bad_nonopt;
code:		}
code:		sa_enter(argc, argv);	/* daemonize if necessary */
code:		sa_mloop(argc, argv);	/* execute main loop */
code:		exit(0);
code:	}

