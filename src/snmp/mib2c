#!/usr/bin/perl
#!/usr/bin/perl -w
# =============================================================================
#
# @(#) src/snmp/mib2c
#
# -----------------------------------------------------------------------------
#
# Copyright (c) 2008-2015  Monavacon Limited <http://www.monavacon.com/>
# Copyright (c) 2001-2008  OpenSS7 Corporation <http://www.openss7.com/>
# Copyright (c) 1997-2001  Brian F. G. Bidulock <bidulock@openss7.org>
#
# All Rights Reserved.
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU Affero General Public License as published by the Free
# Software Foundation; version 3 of the License.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
# details.
#
# You should have received a copy of the GNU Affero General Public License along
# with this program.  If not, see <http://www.gnu.org/licenses/>, or write to
# the Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
# -----------------------------------------------------------------------------
#
# U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software on
# behalf of the U.S. Government ("Government"), the following provisions apply
# to you.  If the Software is supplied by the Department of Defense ("DoD"), it
# is classified as "Commercial Computer Software" under paragraph 252.227-7014
# of the DoD Supplement to the Federal Acquisition Regulations ("DFARS") (or any
# successor regulations) and the Government is acquiring only the license rights
# granted herein (the license rights customarily provided to non-Government
# users).  If the Software is supplied to any unit or agency of the Government
# other than DoD, it is classified as "Restricted Computer Software" and the
# Government's rights in the Software are defined in paragraph 52.227-19 of the
# Federal Acquisition Regulations ("FAR") (or any successor regulations) or, in
# the cases of NASA, in paragraph 18.52.227-86 of the NASA Supplement to the FAR
# (or any successor regulations).
#
# -----------------------------------------------------------------------------
#
# Commercial licensing and support of this software is available from OpenSS7
# Corporation at a fee.  See http://www.openss7.com/
#
# =============================================================================

#
# Description: 
#
# This program, given an OID reference as an argument, creates some
# template mib module files to be used with the ucd-snmp agent.  It is
# far from perfect and will not generate working modules, but it
# significantly shortens development time by outlining the basic
# structure.
#
# Its up to you to verify what it does and change the default values
# it returns.
#

# SNMP
my $havesnmp = eval {require SNMP;};

if (!$havesnmp) {
    print "
ERROR: You don't have the SNMP perl module installed.  Please obtain
this by getting the latest source release of the ucd-snmp toolkit from
http://www.net-snmp.org/download/ .  The perl module is contained in
the perl/SNMP directory.  See the INSTALL file there for instructions.

";
    exit;
}

if ($havesnmp) {
    eval { import SNMP; }
}
use FileHandle;

#use strict 'vars';
$SNMP::auto_init_mib = 0;
$SNMP::verbose = 1;
$SNMP::use_long_names = 1;
$SNMP::use_sprint_value = 0;
$SNMP::use_enums = 1;
$SNMP::use_numeric = 0;
$SNMP::best_guess = 2;
$SNMP::non_increasing = 0;
$SNMP::save_descriptions = 1;
$SNMP::debugging = 1;
SNMP::initMib();
#SNMP::loadModules('ALL');

$configfile="mib2c.conf";
$debug=0;
$nostats = 0;

sub usage {
    print "$0 [-h] [-c configfile] [-f prefix] mibNode\n\n";
    print "  -h\t\tThis message.\n\n";
    print "  -c configfile\tSpecifies the configuration file to use\n\t\tthat dictates what the output of mib2c will look like.\n\n";
    print "  -f prefix\tSpecifies the output prefix to use.  All code\n\t\twill be put into prefix.c and prefix.h\n\n";
    print "  mibNode\tThe name of the top level mib node you want to\n\t\tgenerate code for.  By default, the code will be stored in\n\t\tmibNode.c and mibNode.h (use the -f flag to change this)\n\n";
    print "  -d\t\tdebugging output (dont do it.  trust me.)\n\n";
    print "  -s\t\tDon't display statistics at the end\n\n";
    1;
}	

while($#ARGV >= 0) {
    $_ = shift;
    $configfile = shift if (/^-c/);
    $debug = 1 if (/^-d/);
    $nostats = 1 if (/^-s/);
    usage && exit(1) if (/^-h/);
    $outputName = shift if (/^-f/);
    $oid = $_ if (/^[^-]/);
}
 
read_config($configfile);
#
# internal conversion tables
#

%accessToUCD = qw(ReadOnly RONLY ReadWrite RWRITE 
		  WriteOnly RWRITE Create RWRITE);

#  The lengths of the defined 'variableN' structures
@varLengths = (2,4,7,8,13);

if (!defined($oid)) {
    print STDERR "You didn\'t specify a mib oid to convert!\n";
    usage();
    exit(1);
}

sub dotstocomma {
	my $temp = shift;
	$temp =~ s/\./,/g;
	$temp =~ s/^,//;
	return $temp;
}

sub stripone {
	my $temp = shift;
	$temp =~ s/,[^,]*$//;
	return $temp;
}

sub countsubs {
	my $temp = shift;
	my $count = -1;
	while ($temp =~ s/\.//) { $count=$count+1; }
	return "$count";
}

sub defval {
    my $mib = shift;
    print "processing DEFVAL $mib->{'defaultValue'}:\n" if $debug;
    my $name = $mib->{'label'};
    $name =~ s/-/_/g;
    my $defval = $mib->{'defaultValue'};
    $defval =~ s/\s+/ /g;
    $defval =~ s/^\s*//;
    $defval =~ s/\s*$//;
    my ($val, $len, $ret);
    if ($mib->{'type'} =~ /INTEGER|INTEGER32|UNSIGNED32|COUNTER$|UINTEGER|GAUGE|TICKS/) {
	$ret = "/* StorageNew->${name} = $defval; */ /* DEFVAL $mib->{'defaultValue'} */\n";
	$defval =~ s/\s*\(\s*/(/g;
	$defval =~ s/\s*\)/)/g;
	if ($defval =~ /^$/) {
	    $ret = "StorageNew->${name} = 0;\n";
	} elsif ($defval =~ /^[-+]?[0-9]+$/) {
	    $ret = "StorageNew->${name} = $defval;\n";
	} elsif ($defval =~ /^'([0-9a-fA-F]*)'[XHh]$/) {
	    $ret = "StorageNew->${name} = 0x$1;\n";
	} elsif ($defval =~ /^'[01]+'B$/) {
	    while ($defval =~ s/^'([01])/'/) {
		$val <<= 1; $val += $1;
	    }
	    $ret = "StorageNew->${name} = $val;\n";
	} elsif ($defval =~ /^[a-zA-Z][a-zA-Z0-9_]*(\([0-9]+\))?$/) {
	    if ($defval =~ /\(([0-9]+)\)$/) {
		$ret = "StorageNew->${name} = $1;\n";
	    } else {
		foreach my $k (keys %{$mib->{'enums'}}) {
		    if ($k eq $defval) {
			$val = $mib->{'enums'}{$k};
			if ($mib->{'textualConvention'} eq "TruthValue") {
			    $val = sprintf("%-40s", "TV_".uc($k));
			} elsif ($mib->{'textualConvention'} eq "StorageType") {
			    $val = sprintf("%-40s", "ST_".uc($k));
			} elsif ($mib->{'textualConvention'} eq "RowStatus") {
			    $val = sprintf("%-40s", "RS_".uc($k));
			} else {
			    $val = sprintf("%-40s", uc($name)."_".uc($k));
			}
			last;
		    }
		}
		$ret = "StorageNew->${name} = $val;\n";
	    }
	}
    } elsif ($mib->{'type'} =~ /COUNTER64/) {
	$ret = "/* StorageNew->${name} = $defval; */ /* DEFVAL $mib->{'defaultValue'} */\n";
	$defval =~ s/\s*\(\s*/(/g;
	$defval =~ s/\s*\)/)/g;
	if ($defval =~ /^$/) {
	    $ret = "StorageNew->${name} = (struct counter64) { 0, 0 };\n";
	} elsif ($defval =~ /^[-+]?[0-9]+$/) {
	    $ret = "StorageNew->${name} = (struct counter64) { (long) ((uint64_t) $defval >> 32), (long) ($defval) };\n";
	} elsif ($defval =~ /^'([0-9a-fA-F]*)'[XHh]$/) {
	    $ret = "StorageNew->${name} = 0x$1;\n";
	    $ret = "StorageNew->${name} = (struct counter64) { (long) ((uint64_t) 0x$1 >> 32), (long) (0x$1) };\n";
	} elsif ($defval =~ /^'[01]+'B$/) {
	    $ret = "StorageNew->${name} = (struct counter64) { ";
	    while ($defval =~ s/^'([01])/'/) {
		$val <<= 1; $val += $1; $len += 1;
		if ($len % 64) {
		    $ret .= "$val };\n";
		    last;
		}
		if ($len % 32) {
		    $ret .= "$val, ";
		    $val = 0;
		}
	    }
	    while ($len < 64) {
		$val <<= 1; $len += 1;
		if ($len % 64) {
		    $ret .= "$val };\n";
		    last;
		}
		if ($len % 32) {
		    $ret .= "$val, ";
		    $val = 0;
		}
	    }
	} elsif ($defval =~ /^[a-zA-Z][a-zA-Z0-9_]*(\([0-9]+\))?$/) {
	    if ($defval =~ /\(([0-9]+)\)$/) {
		$ret = "StorageNew->${name} = $1;\n";
	    } else {
		foreach my $k (keys %{$mib->{'enums'}}) {
		    if ($k eq $defval) {
			$val = $mib->{'enums'}{$k};
			if ($mib->{'textualConvention'} eq "TruthValue") {
			    $val = sprintf("%-40s", "TV_".uc($k));
			} elsif ($mib->{'textualConvention'} eq "StorageType") {
			    $val = sprintf("%-40s", "ST_".uc($k));
			} elsif ($mib->{'textualConvention'} eq "RowStatus") {
			    $val = sprintf("%-40s", "RS_".uc($k));
			} else {
			    $val = sprintf("%-40s", uc($name)."_".uc($k));
			}
			last;
		    }
		}
		$ret = "StorageNew->${name} = $val;\n";
	    }
	}
    } elsif ($mib->{'type'} =~ /OCTETSTR|OPAQUE/) {
	$ret = "/* StorageNew->${name} = NULL; */ /* DEFVAL $mib->{'defaultValue'} */\n";
	$ret .= "/* StorageNew->${name}Len = 0; */ /* DEFVAL $mib->{'defaultValue'} */\n";
	if ($defval =~ /^$/) {
	    $ret = "if ((StorageNew->${name} = malloc(1)) == NULL)\n";
	    $ret .= "goto nomem;\n";
	    $ret .= "StorageNew->${name}Len = 0;\n";
	    $ret .= "StorageNew->${name}\[StorageNew->${name}Len\] = 0;\n";
	} elsif ($defval =~ /^'[0-9a-fA-F]+'[XHh]$/) {
	    my $value;
	    $len = ((length($defval) - 3) % 2) * 4;
	    while ($defval =~ s/^'([0-9a-fA-F])/'/) {
		my $c = $1;
		$value <<= 4;
		$len += 4;
		if ($c =~ /[0-9]/) { $value += $c; } elsif
		($c =~ /[aA]/) { $value += 10; } elsif
		($c =~ /[bB]/) { $value += 11; } elsif
		($c =~ /[cC]/) { $value += 12; } elsif
		($c =~ /[dD]/) { $value += 13; } elsif
		($c =~ /[eE]/) { $value += 14; } elsif
		($c =~ /[fF]/) { $value += 15; }
		if (($len % 8) == 0) {
		    $val .= sprintf("\\x%02X", ($value & 0xff));
		    $value = 0;
		}
	    }
	    $len = ($len + 7) >> 3;
	    $ret = "if (memdup((u_char **) \&StorageNew->${name}, (u_char *) \"$val\", $len) != SNMPERR_SUCCESS)\n";
	    $ret .= "goto nomem;\n";
	    $ret .= "StorageNew->${name}Len = $len;\n";
	} elsif ($defval =~ /^'[01]+'B$/) {
	    my $value;
	    $len = (8 - ((length($defval) - 3) % 8)) % 8;
	    while ($defval =~ s/^'([01])/'/) {
		$value <<= 1;
		$len += 1;
		$value += $1;
		if (($len % 8) == 0) {
		    $val .= sprintf("\\x%02X", ($value & 0xff));
		    $value = 0;
		}
	    }
	    $len = ($len + 7) >> 3;
	    $ret = "if (memdup((u_char **) \&StorageNew->${name}, (u_char *) \"$val\", $len) != SNMPERR_SUCCESS)\n";
	    $ret .= "goto nomem;\n";
	    $ret .= "StorageNew->${name}Len = $len;\n";
	} elsif ($defval =~ /^"([^"]*)"$/) {
	    my $val = $1;
	    if ($val =~ /\\x[0-9a-fA-F]+/ || $val =~ /\\0/) {
		my $string = $val;
		$string =~ s/\\x[0-9a-fA-F][0-9a-fA-F]/./sg;
		$string =~ s/\\0/./sg;
		my $len = length($string);
		$ret = "if (memdup((u_char **) \&StorageNew->${name}, (u_char *) \"$val\", $len) != SNMPERR_SUCCESS)\n";
		$ret .= "goto nomem;\n";
		$ret .= "StorageNew->${name}Len = $len;\n";
	    } else {
		$ret = "if ((StorageNew->${name} = (uint8_t *) strdup(\"$val\")) == NULL)\n";
		$ret .= "goto nomem;\n";
		$ret .= "StorageNew->${name}Len = strlen(\"$val\");\n";
	    }
	} elsif ($defval =~ /^\\"([^"]*)\\"$/) {
	    my $val = $1;
	    if ($val =~ /\\x[0-9a-fA-F]+/ || $val =~ /\\0/) {
		my $string = $val;
		$string =~ s/\\x[0-9a-fA-F][0-9a-fA-F]/./sg;
		$string =~ s/\\0/./sg;
		my $len = length($string);
		$ret = "if (memdup((u_char **) \&StorageNew->${name}, (u_char *) \"$val\", $len) != SNMPERR_SUCCESS)\n";
		$ret .= "goto nomem;\n";
		$ret .= "StorageNew->${name}Len = $len;\n";
	    } else {
		$ret = "if ((StorageNew->${name} = (uint8_t *) strdup(\"$val\")) == NULL)\n";
		$ret .= "goto nomem;\n";
		$ret .= "StorageNew->${name}Len = strlen(\"$val\");\n";
	    }
	} elsif ($defval =~ /^'([^'"]*)'$/) {
	    my $val = $1;
	    if ($val =~ /\\x[0-9a-fA-F]+/ || $val =~ /\\0/) {
		my $string = $val;
		$string =~ s/\\x[0-9a-fA-F][0-9a-fA-F]/./sg;
		$string =~ s/\\0/./sg;
		my $len = length($string);
		$ret = "if (memdup((u_char **) \&StorageNew->${name}, (u_char *) \"$val\", $len) != SNMPERR_SUCCESS)\n";
		$ret .= "goto nomem;\n";
		$ret .= "StorageNew->${name}Len = $len;\n";
	    } else {
		$ret = "if ((StorageNew->${name} = (uint8_t *) strdup(\"$val\")) == NULL)\n";
		$ret .= "goto nomem;\n";
		$ret .= "StorageNew->${name}Len = strlen(\"$val\");\n";
	    }
	} else {
	    $ret = "/* StorageNew->${name} = (uint8_t *) strdup($defval); */ /* DEFVAL $mib->{'defaultValue'} */\n";
	    $ret .= "/* StorageNew->${name}Len = strlen($defval); */ /* DEFVAL $mib->{'defaultValue'} */\n";
	}
    } elsif ($mib->{'type'} =~ /OBJECTID/) {
	$ret = "/* StorageNew->${name} = NULL; */ /* DEFVAL $mib->{'defaultValue'} */\n";
	$ret .= "/* StorageNew->${name} = 0; */ /* DEFVAL $mib->{'defaultValue'} */\n";
	$defval =~ s/\s*:\s*/:/g;
	$defval =~ s/\s*\(\s*/(/g;
	$defval =~ s/\s*\)/)/g;
	if ($defval =~ /^$/) {
	    $len = 2;
	    $ret = "if ((StorageNew->${name} = snmp_duplicate_objid(zeroDotZero_oid, $len)) == NULL)\n";
	    $ret .= "goto nomem;\n";
	    $ret .= "StorageNew->${name}Len = $len;\n";
	} elsif ($defval =~ /^[a-zA-Z][a-zA-Z0-9_-]+$/) {
	    my @subids = ();
	    if ($defval eq "zeroDotZero") {
		push @subids, 0;
		push @subids, 0;
	    } else {
		my $mymib = $SNMP::MIB{$defval};
		if ($mymib->{'label'} eq "mib-2") {
		    push @subids, $defval;
		} else {
		    my $oid = $mymib->{'objectID'};
		    $oid =~ s/^\.//;
		    foreach my $s (split(/\./,$oid)) {
			push @subids, $s;
		    }
		}
	    }
	    $len = scalar @subids;
	    $val = join(",", @subids);
	    $val = "{ $val }";
	    if ($val eq "{ 0,0 }") {
		$ret = "if ((StorageNew->${name} = snmp_duplicate_objid(zeroDotZero_oid, $len)) == NULL)\n";
		$ret .= "goto nomem;\n";
		$ret .= "StorageNew->${name}Len = $len;\n";
	    } else {
		$ret = "{\nstatic oid tmpoid[$len] = $val;\n";
		$ret .= "if ((StorageNew->${name} = snmp_duplicate_objid(tmpoid, $len)) == NULL)\n";
		$ret .= "goto nomem;\n";
		$ret .= "StorageNew->${name}Len = $len;\n}\n";
	    }
	} elsif ($defval =~ /^{( ([a-zA-Z][a-zA-Z0-9_:-]*(\([0-9]+\))?|[0-9]+))+ }$/) {
	    $defval =~ s/^{ //;
	    $defval =~ s/ }$//;
	    my @elements = split(/ /,$defval);
	    my @subids = ();
	    foreach my $e (@elements) {
		if ($e =~ /^([0-9]+)$/ || $e =~ /\(([0-9]+)\)$/) {
		    push @subids, $1;
		} elsif ($e eq "zeroDotZero") {
		    push @subids, 0;
		    push @subids, 0;
		} else {
		    my $mymib = $SNMP::MIB{$e};
		    if ($mymib->{'label'} eq "mib-2") {
			push @subids, $e;
		    } else {
			my $oid = $mymib->{'objectID'};
			$oid =~ s/^\.//;
			foreach my $s (split(/\./,$oid)) {
			    push @subids, $s;
			}
		    }
		}
	    }
	    $len = scalar @subids;
	    $val = join(",", @subids);
	    $val = "{ $val }";
	    if ($val eq "{ 0,0 }") {
		$ret = "if ((StorageNew->${name} = snmp_duplicate_objid(zeroDotZero_oid, $len)) == NULL)\n";
		$ret .= "goto nomem;\n";
		$ret .= "StorageNew->${name}Len = $len;\n";
	    } else {
		$ret = "{\nstatic oid tmpoid[$len] = $val;\n";
		$ret .= "if ((StorageNew->${name} = snmp_duplicate_objid(tmpoid, $len)) == NULL)\n";
		$ret .= "goto nomem;\n";
		$ret .= "StorageNew->${name}Len = $len;\n}\n";
	    }
	}
    } elsif ($mib->{'type'} =~ /BITS/) {
	$ret = "/* StorageNew->${name} = NULL; */ /* DEFVAL $mib->{'defaultValue'} */\n";
	$ret .= "/* StorageNew->${name} = 0; */ /* DEFVAL $mib->{'defaultValue'} */\n";
	$defval =~ s/\s*\(\s*/(/g;
	$defval =~ s/\s*\)/)/g;
	if ($defval =~ /^$/ || $defval =~ /^{\s*}$/) {
	    foreach my $k (keys(%{$mib->{'enums'}})) {
		if ($len < $mib->{'enums'}{$k}) {
		    $len = $mib->{'enums'}{$k};
		}
	    }
	    $len += 1;
	    $len = (($len + 7) >> 3);
	    for (my $i = 0; $i < $len; $i++) {
		$val = sprintf("\\x%02X", 0).$val;
	    }
	    $ret = "if (memdup((u_char **) \&StorageNew->${name}, (u_char *) \"$val\", $len) != SNMPERR_SUCCESS)\n";
	    $ret .= "goto nomem;\n";
	    $ret .= "StorageNew->${name}Len = $len;\n";
	} elsif ($defval =~ /^[0-9]+$/) {
	    my $value = $defval;
	    foreach my $k (keys(%{$mib->{'enums'}})) {
		if ($len < $mib->{'enums'}{$k}) {
		    $len = $mib->{'enums'}{$k};
		}
	    }
	    $len += 1;
	    $len = (($len + 7) >> 3);
	    for (my $i = 0; $i < $len; $i++) {
		$val = sprintf("\\x%02X", ($value & 0xff)).$val;
		$value >>= 8;
	    }
	    $ret = "if (memdup((u_char **) \&StorageNew->${name}, (u_char *) \"$val\", $len) != SNMPERR_SUCCESS)\n";
	    $ret .= "goto nomem;\n";
	    $ret .= "StorageNew->${name}Len = $len;\n";
	} elsif ($defval =~ /^'[01]*'B$/) {
	    my $value;
	    my $length;
	    foreach my $k (keys %{$mib->{'enums'}}) {
		if ($length < $mib->{'enums'}{$k}) {
		    $length = $mib->{'enums'}{$k};
		}
	    }
	    $length += 1;
	    while ($defval =~ s/^'([01])/'/) {
		$value <<= 1;
		$value += $1;
		$len += 1;
		if (($len % 8) == 0) {
		    $val = sprintf("\\x%02X", ($value & 0xff)).$val;
		    $value = 0;
		}
		if ($len >= $length) {
		    $len = $length;
		    last;
		}
	    }
	    while ($len < $length) {
		$value <<= 1;
		$len += 1;
		if (($len % 8) == 0) {
		    $val = sprintf("\\x%02X", ($value & 0xff)).$val;
		    $value = 0;
		}
	    }
	    if (($len % 8) != 0) {
		while (($len % 8) != 0) {
		    $value <<= 1;
		    $len += 1;
		}
		$val = sprintf("\\x%02X", ($value & 0xff)).$val;
		$value = 0;
	    }
	    $len = (($len + 7) >> 3);
	    $ret = "if (memdup((u_char **) \&StorageNew->${name}, (u_char *) \"$val\", $len) != SNMPERR_SUCCESS)\n";
	    $ret .= "goto nomem;\n";
	    $ret .= "StorageNew->${name}Len = $len;\n";
	} elsif ($defval =~ /^'([0-9a-fA-f]*)'[XHh]$/) {
	    my $value;
	    my $length;
	    foreach my $k (keys %{$mib->{'enums'}}) {
		if ($length < $mib->{'enums'}{$k}) {
		    $length = $mib->{'enums'}{$k};
		}
	    }
	    while ($defval =~ s/^'([0-9a-fA-F])/'/) {
		my $c = $1;
		$value <<= 4;
		if ($c =~ /[0-9]/) { $value += $c; } elsif
		($c =~ /[aA]/) { $value += 10; } elsif
		($c =~ /[bB]/) { $value += 11; } elsif
		($c =~ /[cC]/) { $value += 12; } elsif
		($c =~ /[dD]/) { $value += 13; } elsif
		($c =~ /[eE]/) { $value += 14; } elsif
		($c =~ /[fF]/) { $value += 15; }
		$len += 4;
		if (($len % 8) == 0) {
		    $val = sprintf("\\x%02X", ($value & 0xff)).$val;
		    $value = 0;
		}
		if ($len >= $length) {
		    $len = $length;
		    last;
		}
	    }
	    while ($len < $length) {
		$value <<= 1;
		$len += 1;
		if (($len % 8) == 0) {
		    $val = sprintf("\\x%02X", ($value & 0xff)).$val;
		    $value = 0;
		}
	    }
	    if (($len % 8) != 0) {
		while (($len % 8) != 0) {
		    $value <<= 1;
		    $len += 1;
		}
		$val = sprintf("\\x%02X", ($value & 0xff)).$val;
		$value = 0;
	    }
	    $len = (($len + 7) >> 3);
	    $ret = "if (memdup((u_char **) \&StorageNew->${name}, (u_char *) \"$val\", $len) != SNMPERR_SUCCESS)\n";
	    $ret .= "goto nomem;\n";
	    $ret .= "StorageNew->${name}Len = $len;\n";
	} elsif ($defval =~ /^{\s*([a-zA-Z][a-zA-Z0-9_]*(\([0-9]+\))?|[0-9]+)(\s*,\s*([a-zA-Z][a-zA-Z0-9_]*(\([0-9]+\))?|[0-9]+))*\s*}$/) {
	    $defval =~ s/^{\s*//;
	    $defval =~ s/\s*}$//;
	    my @elements = split(/\s*,\s*/,$defval);
	    my @bits = ();
	    foreach my $e (@elements) {
		if ($e =~ /^([0-9]+)$/ || $e =~ /\(([0-9]+)\)$/) {
		    push @bits, $1;
		} elsif (defined($mib->{'enums'}{$e})) {
		    push @bits, $mib->{'enums'}{$e};
		}
	    }
	    foreach my $k (keys %{$mib->{'enums'}}) {
		if ($len < $mib->{'enums'}{$k}) {
		    $len = $mib->{'enums'}{$k};
		}
	    }
	    $len += 1;
	    $len = (($len + 7) >> 3);
	    my $value = 0;
	    foreach my $b (@bits) {
		$value += (1 << (($len * 8) - 1 - $b));
	    }
	    for (my $i = 0; $i < $len; $i++) {
		$val = sprintf("\\x%02X", ($value & 0xff)).$val;
		$value >>= 8;
	    }
	    $ret = "if (memdup((u_char **) \&StorageNew->${name}, (u_char *) \"$val\", $len) != SNMPERR_SUCCESS)\n";
	    $ret .= "goto nomem;\n";
	    $ret .= "StorageNew->${name}Len = $len;\n";
	}
    } elsif ($mib->{'type'} =~ /NETADDR|IPADDR/) {
	$ret = "/* StorageNew->${name} = NULL; */ /* DEFVAL $mib->{'defaultValue'} */\n";
	$ret .= "/* StorageNew->${name} = 0; */ /* DEFVAL $mib->{'defaultValue'} */\n";
	if ($defval =~ /^$/) {
	    $ret = "StorageNew->${name} = (u_char *) \"\\x00\\x00\\x00\\x00\";\n";
	    $ret .= "StorageNew->${name}Len = 4;\n";
	} elsif ($defval =~ /^([0-9]+)\.([0-9]+)\.([0-9]+)\.([0-9]+)$/) {
	    $val = sprintf("\"\\x%02X\\x%02X\\x%02X\\x%02X\"", $1, $2, $3, $4);
	    $ret = "StorageNew->${name} = (u_char *) $val;\n";
	    $ret .= "StorageNew->${name}Len = 4;\n";
	}
    }
    print "...done.   DEFVAL $mib->{'defaultValue'}:\n" if $debug;
    return $ret;
}

my $mymib = $SNMP::MIB{$oid};
if ($mymib->{'label'} eq "mib-2") {
    print STDERR "Couldn\'t find mib node $oid\n";
    print STDERR "(Note, this should be a MIB object, not a file)\n";
    exit(1);
}
$_ = $commaoid = $fulloid = $mymib->{'objectID'};
if (!defined ($fulloid)) {
    print STDERR "Couldn\'t find mib reference: $oid\n";
    exit(1);
}
s/[^.]//g;
$commaoid =~ s/\./,/g;
$commaoid =~ s/^,//g;

$mibName = $mymib->{'label'};
$mibName =~ s/-/_/g;
$MIBNAME = uc($mibName);
$mibname = lc($mibName);
$outputName = $mymib->{'label'} if (!defined($outputName));
$OUTPUTNAME = uc($outputName);
$outputbase = $outputName;
$outputbase =~ s/_.*$//;
$outputbase = lc($outputbase);
$OUTPUTBASE = uc($outputbase);
$vroutine="$mibName";
print "outputting to $outputName.c and $outputName.h ...\n";

#============================================
#
#   Walk the MIB tree, and construct strings
#     holding the various fragments of code needed.
#
#   'loadMib' returns the length of the longest OID suffix
#     encountered.
#
#   The variables constructed and used are:
#
#   (in the header file)
#	functionInfo :	A list of definitions for the table-handling functions,
#			and routines for SETtable variables.
#			(The main scalar handling routine is handled implicitly)
#
#   (in the code file)
#	structinfo :	The contents of the variableN structure listing
#			the variables handled, including type, access level,
#			OID suffix and 'magic number'
#
#	caseStatements:	A hash array (indexed by variable routine name)
#			containing the body of the switch statement
#			used for returning the appropriate values.
#			At a minimum, this consists of the various 'case' labels
#			If full type information is available (from mib2c.conf)
#			then this will also include a default initialiser,
#			and setting of a 'write_method' (if appropriate).
#
#	writeFuncs:	A list of function skeletons for setting variables
#			(for variables with suitable access levels).
#			Note that this list will not include functions
#			for variables which don't provide type information
#			in the mib2c.conf file (even if such variables are
#			defined as writeable in the variableN structure).
#
#============================================
$count = 0;
$depth = loadMib($mymib,0)-1;

#  Determine which 'variableN' structure is needed
for($varlen = 0; $varlen <= $#varLengths; $varlen++) {
  last if ($depth <= $varLengths[$varlen]);
}
$varlen = $varLengths[$varlen];

#============================================
#
#	Table-handling routines.
#
#============================================
foreach $vtable (@table_list) {
    foreach $ptable (@processtable) {
	next if (defined($variables{$ptable}{'skipif'}) &&
		 eval $variables{$ptable}{'skipif'});
	$variables{$ptable}{'processed'} .= 
	    (eval "\"$variables{$ptable}{'code'}\"") . "\n";
    }
    $var_routines .= 
	(eval "\"$variables{'code-var-table'}{'code'}\"") . "\n";
}

#============================================
#
#   Output the header file
#
#============================================
open(DOTH,">$outputName.h");
print DOTH (eval "\"$variables{'code-dot-h'}{'code'}\"") . "\n";
close(DOTH);

#============================================
#
#   Output the code file:
#	Initialisation and main variable routine.
#
#============================================

open(DOTC,">$outputName.c");
print DOTC (eval "\"$variables{'code-main-part'}{'code'}\"") . "\n";;
close(DOTC);

#============================================
#
# Everyone loves statistics.
#
#============================================
print "  depth: $depth\n";
print "  Number of Lines Created:\n";
system("wc -l $outputName.c $outputName.h");
print "Done.\n\n";
print "NOTE: the code that has been created for you is merely a starting template.\n";
print "      You will have to modify it in order to make it work properly.\n";

#============================================
#
#  loadMib:
#	Recursive routine to walk the mib,
#	and construct the various code fragment strings.
#
#============================================
sub loadMib {
    my $mib = shift;
    my $i;
    my $c;
    my $depth = shift;
    $depth = $depth + 1;
    my $name = $mib->{'label'};
    $name =~ s/-/_/g;
    my $NAME = uc($name);
    print "doing $mib->{label} : $mib->{objectID}\n" if $debug;
    if ($debug) {
	for $c (@{$mib->{'children'}}) {
	    print "child: ".$c->{'label'}."\n";
	}
    }
    my @elements = split(/\./,$mib->{'objectID'});
    $variables{$name}{'oidlen'} = (scalar @elements) - 1;
    if (defined($mib->{'access'})) {
	if ($mib->{'access'} =~ /Read|Write|Create/) {
	    $count = $count + 1;
        }
	$subid = $mib->{'objectID'};
	if  ( $subid =~ s/$fulloid\.// ) {
	    $variables{$name}{'myoid'} = 1;
	}
	$subid =~ s/\./,/g;
	if (!defined($variables{$mib->{'type'}})  && !defined($mib->{'indexes'})) {
	    print STDERR "unknown type:  $mib->{type} for $mib->{label} $mib->{'access'}\n";
	    print STDERR "unknown type:  no information generated for $mib->{label}\n";
	} else {
	    foreach $i (@process) {
		next if (defined($variables{$i}{'skipif'}) &&
			 eval $variables{$i}{'skipif'});
		my $result = (eval "\"$variables{$i}{'code'}\"");
		$variables{$i}{'processed'} .= $result;
		$variables{$vroutine}{$i}{'processed'} .= $result;
		$variables{$vroutine}{$name}{$i}{'processed'} .= $result;
	    }
	}
	if (defined($mib->{'indexes'})) {
	    print "indexes: ", join(", ",@{$mib->{'indexes'}}),"\n" if ($debug);
	    $variables{$vroutine}{'indexes'} = $mib->{'indexes'};
	    foreach $i (@{$mib->{'indexes'}}) {
		$variables{$mibName}{$i}{'isanindex'} = 1;
		$variables{$vroutine}{$i}{'isanindex'} = 1;
	    }
	}
    } elsif (defined($mib->{description})) {
	foreach $i (@processoid) {
	    next if (defined($variables{$i}{'skipif'}) &&
		     eval $variables{$i}{'skipif'});
	    my $result = (eval "\"$variables{$i}{'code'}\"");
	    $variables{$i}{'processed'} .= $result;
	    $variables{$vroutine}{$i}{'processed'} .= $result;
	    $variables{$vroutine}{$name}{$i}{'processed'} .= $result;
	}
    }
    my $children = $$mib{'children'}; 
    my $i;
    my $j;
    print "processing (".scalar(@{$children})." children): $name\n" if $debug;
    foreach $i (@{$children}) {
	foreach $j (@{$mib->{'indexes'}}) {
	    if ($j eq $i->{'label'}) {
		$variables{$vroutine}{$j}{'ismyindex'} = 1;
	    }
	}
	if ($i->{'textualConvention'}) {
	    if ($i->{'textualConvention'} eq "RowStatus") {
		    $variables{$vroutine}{'rowstatus'} = $i->{'label'};
		    $variables{$vroutine}{'rowstatus'} =~ s/-/_/g;
	    }
	    if ($i->{'textualConvention'} eq "StorageType") {
		    $variables{$vroutine}{'storagetype'} = $i->{'label'};
		    $variables{$vroutine}{'storagetype'} =~ s/-/_/g;
	    }
	}
    }
    foreach $j (@{$mib->{'indexes'}}) {
	if ( $variables{$vroutine}{$j}{'ismyindex'} != 1 ) {
	    $i = $SNMP::MIB{$j};
	    loadMib($i, $depth) unless ($i->{'label'} eq "mib-2");
	}
    }
    my $newdepth = $depth;
    foreach $i (sort {$a->{subID} <=> $b->{subID}} @{$children}) {
	if ( $name =~ /Table$/ ) {
	    $vroutine="$name";
	    push @table_list, $name;
	    $newdepth = max(loadMib($i, $depth), $newdepth);
	    $vroutine="$mibName";
	} else {
	    $newdepth = max(loadMib($i, $depth), $newdepth);
	}
    }
    return $newdepth;
}

sub max {
    my $x = shift;
    my $y = shift;
    return ($x > $y) ? $x : $y;
}


sub read_config() {
    my $configfile = shift;
    my ($type, $lasttoken);
    my $fh = new FileHandle;
    $configfile = "/usr/local/share/snmp/" . $configfile if (!(-f $configfile));
    if ( $fh->open("<$configfile") ) {
	while(<$fh>) {
	    next if (/^\s*\#/ || /^\s*$/);
	    if (/^\s*type:\s*(.*)/) {
		if (defined($type) && defined($lasttoken) && 
		    defined ($variables{$type}{$lasttoken})) {
		    chomp($variables{$type}{$lasttoken});
		}
		$type = $1;
		chomp($type);
	    } elsif (/include:\s*(.*)/) {
		read_config($1);
	    } elsif (/process:\s*(.*)/) {
		push (@process, $1);
	    } elsif (/processoid:\s*(.*)/) {
		push (@processoid, $1);
	    } elsif (/processtable:\s*(.*)/) {
		push (@processtable, $1);
	    } elsif (/delete:\s*(.*)/) {
		delete($variables{$type}{$1});
	    } elsif (/copy:\s*(.*)/) {
		my $item;
		my $arg = $1;
		chomp($arg);
		foreach $item (keys(%{$variables{$arg}})) {
		    $variables{$type}{$item} = $variables{$arg}{$item};
		}
	    } else {
		if (/\s*([^:]*):(\s*.*)/) {
		    if (!defined($variables{$type}{$1})) {
			if (defined($type) && defined($lasttoken) && 
			    defined ($variables{$type}{$lasttoken})) {
			    chomp($variables{$type}{$lasttoken});
			}
			$variables{$type}{$1} = $2;
			$lasttoken = $1;
			$variables{$type}{$1} =~ s/^\t+//;
		    } else {
			# duplicate entry:  tack it on.
			my ($x, $y) = ($1, $2);
			$y =~ s/^\t+//;
			$variables{$type}{$x} .= "\n" . $y;
		    }
		} else {
		    # continuation line, it started with spaces or a +
		    s/^\s*//;
		    s/^\+//; 
		    $variables{$type}{$lasttoken} .= "\n" . $_;
		    chomp($variables{$type}{$lasttoken});
		}
	    }
	}
	$fh->close();
    } else {
	warn "Config file ($configfile) not found.\n";
    }
}

sub evalstr {
    my $str = shift;
#    if ($str !~ /^\"/) {
	$str = "\"$str\"";  # surround by quotes.
#    }
    eval ($str);            # should return a string, with variables expanded
}

sub evalrstr {
    my $rstr = shift;
#    if ($str !~ /^\"/) {
#	$$rstr = "\"" . $$rstr . "\"";  # surround by quotes.
#    }
    eval ("\"$$rstr\"");            # should return a string, with variables expanded
}
